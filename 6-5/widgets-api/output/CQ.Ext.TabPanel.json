{"name":"CQ.Ext.TabPanel","doc":"A basic tab container. TabPanels can be used exactly like a standard CQ.Ext.Panel\nfor layout purp...","configs":[{"name":"activeItem","doc":"A string component id or the numeric index of the component that should be initially activated wi..."},{"name":"activeTab","doc":"A string id or the numeric index of the tab that should be initially activated on render (default..."},{"name":"allowDomMove","doc":"Whether the component can move the Dom node when rendering (defaults to true)."},{"name":"anchor","doc":"Note: this config is only used when this Component is rendered by a Container which has been conf..."},{"name":"animCollapse","doc":"true to animate the transition when the panel is collapsed, false to skip the animation (defaults..."},{"name":"animScroll","doc":"True to animate tab scrolling so that hidden tabs slide smoothly into view (defaults to true). On..."},{"name":"applyTo","doc":"Specify the id of the element, a DOM element or an existing Element corresponding to a DIV that i..."},{"name":"autoDestroy","doc":"If true the container will automatically destroy any contained component that is removed from it,..."},{"name":"autoEl","doc":"A tag name or DomHelper spec used to create the Element which will encapsulate this Component. Yo..."},{"name":"autoHeight","doc":"True to use height:'auto', false to use fixed height (or allow it to be managed by its parent Con..."},{"name":"autoLoad","doc":"A valid url spec according to the Updater CQ.Ext.Updater.update method. If autoLoad is not null, ..."},{"name":"autoScroll","doc":"true to use overflow:'auto' on the components layout element and show scroll bars automatically w..."},{"name":"autoShow","doc":"True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and r..."},{"name":"autoTabSelector","doc":"The CSS selector used to search for tabs in existing markup when autoTabs = true (defaults to 'di..."},{"name":"autoTabs","doc":"true to query the DOM for any divs with a class of 'x-tab' to be automatically converted to tabs ..."},{"name":"autoWidth","doc":"True to use width:'auto', false to use fixed width (or allow it to be managed by its parent Conta..."},{"name":"baseCls","doc":"The base CSS class applied to the panel (defaults to 'x-tab-panel')."},{"name":"bbar","doc":"The bottom toolbar of the panel. This can be a CQ.Ext.Toolbar object, a toolbar config, or an arr..."},{"name":"bbarCfg","doc":"A DomHelper element specification object specifying the element structure of this Panel's bbar El..."},{"name":"bodyBorder","doc":"True to display an interior border on the body element of the panel, false to hide it (defaults t..."},{"name":"bodyCfg","doc":"A DomHelper element specification object may be specified for any Panel Element. By default, the ..."},{"name":"bodyCssClass","doc":"Additional css class selector to be applied to the body element in the format expected by CQ.Ext...."},{"name":"bodyStyle","doc":"Custom CSS styles to be applied to the body element in the format expected by CQ.Ext.Element.appl..."},{"name":"border","doc":"True to display the borders of the panel's body element, false to hide them (defaults to true). B..."},{"name":"boxMaxHeight","doc":"The maximum value in pixels which this BoxComponent will set its height to. Warning: This will ov..."},{"name":"boxMaxWidth","doc":"The maximum value in pixels which this BoxComponent will set its width to. Warning: This will ove..."},{"name":"boxMinHeight","doc":"The minimum value in pixels which this BoxComponent will set its height to. Warning: This will ov..."},{"name":"boxMinWidth","doc":"The minimum value in pixels which this BoxComponent will set its width to. Warning: This will ove..."},{"name":"bubbleEvents","doc":"An array of events that, when fired, should be bubbled to any parent container. See CQ.Ext.util.O..."},{"name":"bufferResize","doc":"When set to true (50 milliseconds) or a number of milliseconds, the layout assigned for this cont..."},{"name":"buttonAlign","doc":"The alignment of any buttons added to this panel. Valid values are 'right', 'left' and 'center' (..."},{"name":"buttons","doc":"buttons will be used as items for the toolbar in the footer (fbar). Typically the value of this c..."},{"name":"bwrapCfg","doc":"A DomHelper element specification object specifying the element structure of this Panel's bwrap E..."},{"name":"clearCls","doc":"The CSS class used to to apply to the special clearing div rendered directly after each form fiel..."},{"name":"closable","doc":"Panels themselves do not directly support being closed, but some Panel subclasses do (like CQ.Ext..."},{"name":"cls","doc":"An optional extra CSS class that will be added to this component's Element (defaults to ''). This..."},{"name":"collapseFirst","doc":"true to make sure the collapse\/expand toggle button always renders first (to the left of) any oth..."},{"name":"collapsedCls","doc":"A CSS class to add to the panel's element after it has been collapsed (defaults to 'x-panel-colla..."},{"name":"contentEl","doc":"Optional. Specify an existing HTML element, or the id of an existing HTML element to use as the c..."},{"name":"ctCls","doc":"An optional extra CSS class that will be added to this component's container. This can be useful ..."},{"name":"data","doc":"The initial set of data to apply to the tpl to update the content area of the Component."},{"name":"defaultType","doc":"The default xtype of child Components to create in this Container when a child item is specified ..."},{"name":"defaults","doc":"This option is a means of applying default settings to all added items whether added through the ..."},{"name":"deferredRender","doc":"true by default to defer the rendering of child items to the browsers DOM until a tab is activate..."},{"name":"disabled","doc":"Render this component disabled (default is false)."},{"name":"disabledClass","doc":"CSS class added to the component when it is disabled (defaults to 'x-item-disabled')."},{"name":"draggable","doc":"true to enable dragging of this Panel (defaults to false). For custom drag\/drop implementations, ..."},{"name":"elements","doc":"A comma-delimited list of panel elements to initialize when the panel is rendered. Normally, this..."},{"name":"enableTabScroll","doc":"True to enable scrolling to tabs that may be invisible due to overflowing the overall TabPanel wi..."},{"name":"fbar","doc":"A Toolbar object, a Toolbar config, or an array of Buttons\/Button configs, describing a Toolbar t..."},{"name":"fieldDescription","doc":"The text to display below this component (defaults to ''). Note: this config is only used when th..."},{"name":"fieldLabel","doc":"The label text to display next to this Component (defaults to ''). Note: this config is only used..."},{"name":"fieldSubLabel","doc":"The text to display below the fieldLabel (defaults to ''). Note: this config is only used when th..."},{"name":"flex","doc":"Note: this config is only used when this Component is rendered by a Container which has been conf..."},{"name":"floating","doc":"This property is used to configure the underlying CQ.Ext.Layer. Acceptable values for this config..."},{"name":"footer","doc":"true to create the footer element explicitly, false to skip creating it. The footer will be creat..."},{"name":"footerCfg","doc":"A DomHelper element specification object specifying the element structure of this Panel's footer ..."},{"name":"forceLayout","doc":"If true the container will force a layout initially even if hidden or collapsed. This option is u..."},{"name":"frame","doc":"false by default to render with plain 1px square borders. true to render with 9 elements, complet..."},{"name":"headerCfg","doc":"A DomHelper element specification object specifying the element structure of this Panel's header ..."},{"name":"height","doc":"The height of this component in pixels (defaults to auto). Note to express this dimension as a pe..."},{"name":"hidden","doc":"Render this component hidden (default is false). If true, the hide method will be called internally."},{"name":"hideBorders","doc":"True to hide the borders of each contained component, false to defer to the component's existing ..."},{"name":"hideLabel","doc":"true to completely hide the label element (label and separator). Defaults to false. By default, e..."},{"name":"hideMode","doc":"How this component should be hidden. Supported values are 'visibility' (css visibility), 'offsets..."},{"name":"hideParent","doc":"True to hide and show the component's container when hide\/show is called on the component, false ..."},{"name":"html","doc":"An HTML fragment, or a DomHelper specification to use as the layout element content (defaults to ..."},{"name":"iconCls","doc":"The CSS class selector that specifies a background image to be used as the header icon (defaults ..."},{"name":"id","doc":"The unique id of this component (defaults to an auto-assigned id). You should assign an id if you..."},{"name":"itemCls","doc":"Note: this config is only used when this Component is rendered by a Container which has been conf..."},{"name":"itemId","doc":"An itemId can be used as an alternative way to get a reference to a component when no object refe..."},{"name":"itemTpl","doc":"(Optional) A Template or XTemplate which may be provided to process the data object returned from..."},{"name":"items","doc":"layout A single item, or an array of child Components to be added to this container, for example:..."},{"name":"keys","doc":"A CQ.Ext.KeyMap config object (in the format expected by CQ.Ext.KeyMap.addBinding used to assign ..."},{"name":"labelSeparator","doc":"The separator to display after the text of each fieldLabel. This property may be configured at va..."},{"name":"labelStyle","doc":"A CSS style specification string to apply directly to this field's label. Defaults to the contain..."},{"name":"layoutConfig","doc":"TabPanel implicitly uses CQ.Ext.layout.CardLayout as its layout manager. layoutConfig may be used..."},{"name":"layoutOnTabChange","doc":"Set to true to force a layout of the active tab when the tab is changed. Defaults to false. See C..."},{"name":"margins","doc":"Note: this config is only used when this BoxComponent is rendered by a Container which has been c..."},{"name":"maskDisabled","doc":"true to mask the panel when it is disabled, false to not mask it (defaults to true). Either way, ..."},{"name":"minButtonWidth","doc":"Minimum width in pixels of all buttons in this panel (defaults to 75)"},{"name":"minTabWidth","doc":"The minimum width in pixels for each tab when resizeTabs = true (defaults to 30)."},{"name":"monitorResize","doc":"True to automatically monitor window resize events to handle anything that is sensitive to the cu..."},{"name":"overCls","doc":"An optional extra CSS class that will be added to this component's Element when the mouse moves o..."},{"name":"padding","doc":"A shortcut for setting a padding style on the body element. The value can either be a number to b..."},{"name":"pageX","doc":"The page level x coordinate for this component if contained within a positioning container."},{"name":"pageY","doc":"The page level y coordinate for this component if contained within a positioning container."},{"name":"plain","doc":"true to render the tab strip without a background container image (defaults to false)."},{"name":"plugins","doc":"An object or array of objects that will provide custom functionality for this component. The only..."},{"name":"ptype","doc":"The registered ptype to create. This config option is not used when passing a config object into ..."},{"name":"ref","doc":"A path specification, relative to the Component's ownerCt specifying into which ancestor Containe..."},{"name":"region","doc":"Note: this config is only used when this BoxComponent is rendered by a Container which has been c..."},{"name":"renderTo","doc":"Specify the id of the element, a DOM element or an existing Element that this component will be r..."},{"name":"resizeEvent","doc":"The event to listen to for resizing in layouts. Defaults to 'resize'."},{"name":"resizeTabs","doc":"True to automatically resize each tab so that the tabs will completely fill the tab strip (defaul..."},{"name":"scrollDuration","doc":"The number of milliseconds that each scroll animation should last (defaults to .35). Only applies..."},{"name":"scrollIncrement","doc":"The number of pixels to scroll each time a tab scroll button is pressed (defaults to 100, or if r..."},{"name":"scrollRepeatInterval","doc":"Number of milliseconds between each scroll while a tab scroll button is continuously pressed (def..."},{"name":"shadow","doc":"true (or a valid CQ.Ext.Shadow CQ.Ext.Shadow.mode value) to display a shadow behind the panel, fa..."},{"name":"shadowOffset","doc":"The number of pixels to offset the shadow if displayed (defaults to 4). Note that this option onl..."},{"name":"shim","doc":"false to disable the iframe shim in browsers which need one (defaults to true). Note that this op..."},{"name":"stateEvents","doc":"An array of events that, when fired, should trigger this component to save its state (defaults to..."},{"name":"stateId","doc":"The unique id for this component to use for state management purposes (defaults to the component ..."},{"name":"stateful","doc":"A flag which causes the Component to attempt to restore the state of internal properties from a s..."},{"name":"style","doc":"A custom style specification to be applied to this component's Element. Should be a valid argumen..."},{"name":"tabCls","doc":"This config option is used on child Components of ths TabPanel. A CSS class name applied to the t..."},{"name":"tabMargin","doc":"The number of pixels of space to calculate into the sizing and scrolling of tabs. If you change t..."},{"name":"tabPosition","doc":"The position where the tab strip should be rendered (defaults to 'top'). The only other supported..."},{"name":"tabTip","doc":"Note: this config is only used when this BoxComponent is a child item of a TabPanel. A string to ..."},{"name":"tabWidth","doc":"The initial width in pixels of each new tab (defaults to 120)."},{"name":"tbar","doc":"The top toolbar of the panel. This can be a CQ.Ext.Toolbar object, a toolbar config, or an array ..."},{"name":"tbarCfg","doc":"A DomHelper element specification object specifying the element structure of this Panel's tbar El..."},{"name":"tpl","doc":"An CQ.Ext.Template, CQ.Ext.XTemplate or an array of strings to form an CQ.Ext.XTemplate. Used in ..."},{"name":"tplWriteMode","doc":"The CQ.Ext.(X)Template method to use when updating the content area of the Component. Defaults to..."},{"name":"unstyled","doc":"Overrides the baseCls setting to baseCls = 'x-plain' which renders the panel unstyled except for ..."},{"name":"wheelIncrement","doc":"For scrolling tabs, the number of pixels to increment on mouse wheel scrolling (defaults to 20)."},{"name":"width","doc":"The width of this component in pixels (defaults to auto). Note to express this dimension as a per..."},{"name":"x","doc":"The local x (left) coordinate for this component if contained within a positioning container."},{"name":"xtype","doc":"The registered xtype to create. This config option is not used when passing a config object into ..."},{"name":"y","doc":"The local y (top) coordinate for this component if contained within a positioning container."}],"props":[{"name":"body","doc":"\nThe Panel's body Element which may be used to contain HTML content.\nThe content may be specified..."},{"name":"buttons","doc":"This Panel's Array of buttons as created from the buttons\nconfig property. Read only."},{"name":"bwrap","doc":"\nThe Panel's bwrap Element used to contain other Panel elements\n(tbar, body, bbar, footer). See b..."},{"name":"collapsed","doc":"\nTrue if this panel is collapsed. Read-only."},{"name":"dd","doc":"If this Panel is configured draggable, this property will contain\nan instance of CQ.Ext.dd.DragSo..."},{"name":"disabled","doc":"\nTrue if this component is disabled. Read-only."},{"name":"el","doc":"The CQ.Ext.Element which encapsulates this Component. Read-only.\nThis will usually be a &lt;DIV> ..."},{"name":"footer","doc":"\nThe Panel's footer Element. Read-only.\nThis Element is used to house the Panel's buttons or fbar..."},{"name":"hidden","doc":"\nTrue if this component is hidden. Read-only."},{"name":"initialConfig","doc":"This Component's initial configuration specification. Read-only."},{"name":"items","doc":"The collection of components in this container as a CQ.Ext.util.MixedCollection"},{"name":"ownerCt","doc":"\nThis Component's owner Container (defaults to undefined, and is set automatically when\nthis Comp..."},{"name":"refOwner","doc":""},{"name":"rendered","doc":"\nTrue if this component has been rendered. Read-only."}],"methods":[{"name":"activate","doc":"See setActiveTab. Sets the specified tab as the active tab. This method fires\nthe beforetabchange..."},{"name":"add","doc":"Adds Component(s) to this Container.\nDescription :\n\nFires the beforeadd event before adding\nThe C..."},{"name":"addButton","doc":"Adds a button to this panel.  Note that this method must be called prior to rendering.  The prefe..."},{"name":"addClass","doc":"Adds a CSS class to the component's underlying element."},{"name":"applyToMarkup","doc":"Apply this component to existing markup that is valid. With this function, no call to render() is..."},{"name":"beginUpdate","doc":"Suspends any internal calculations or scrolling while doing a bulk operation. See endUpdate"},{"name":"bubble","doc":"Bubbles up the component\/container heirarchy, calling the specified function with each component...."},{"name":"cascade","doc":"Cascades down the component\/container heirarchy from this component (called first), calling the s..."},{"name":"cloneConfig","doc":"Clone the current component using the original config values passed into this instance by default."},{"name":"collapse","doc":"Collapses the panel body so that it becomes hidden.  Fires the beforecollapse event which will\nca..."},{"name":"destroy","doc":"Destroys this component by purging any event listeners, removing the component's element from the..."},{"name":"disable","doc":"Disable this component and fire the 'disable' event."},{"name":"doLayout","doc":"Force this container's layout to be recalculated. A call to this function is required after addin..."},{"name":"enable","doc":"Enable this component and fire the 'enable' event."},{"name":"enableBubble","doc":"Enables events fired by this Observable to bubble up an owner hierarchy by calling\nthis.getBubble..."},{"name":"endUpdate","doc":"Resumes calculations and scrolling at the end of a bulk operation. See beginUpdate"},{"name":"expand","doc":"Expands the panel body so that it becomes visible.  Fires the beforeexpand event which will\ncance..."},{"name":"find","doc":"Find a component under this container at any level by property"},{"name":"findBy","doc":"Find a component under this container at any level by a custom function. If the passed function r..."},{"name":"findById","doc":"Find a component under this container at any level by id"},{"name":"findByType","doc":"Find a component under this container at any level by xtype or class"},{"name":"findParentBy","doc":"Find a container above this component at any level by a custom function. If the passed function r..."},{"name":"findParentByType","doc":"Find a container above this component at any level by xtype or class"},{"name":"focus","doc":"Try to focus this component."},{"name":"get","doc":"Get a component contained by this container (alias for items.get(key))"},{"name":"getActiveTab","doc":"Returns the Component which is the currently active tab. Note that before the TabPanel\nfirst acti..."},{"name":"getBottomToolbar","doc":"Returns the toolbar from the bottom (bbar) section of the panel."},{"name":"getBox","doc":"Gets the current box measurements of the component's underlying element."},{"name":"getBubbleTarget","doc":"Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy."},{"name":"getComponent","doc":"Examines this container's items property\nand gets a direct child component of this container."},{"name":"getEl","doc":"Returns the CQ.Ext.Element which encapsulates this Component.\nThis will usually be a &lt;DIV> ele..."},{"name":"getFooterToolbar","doc":"Returns the toolbar from the footer (fbar) section of the panel."},{"name":"getFrameHeight","doc":"Returns the height in pixels of the framing elements of this panel (including any top and bottom ..."},{"name":"getFrameWidth","doc":"Returns the width in pixels of the framing elements of this panel (not including the body width)...."},{"name":"getHeight","doc":"Gets the current height of the component's underlying element."},{"name":"getId","doc":"Returns the id of this component or automatically generates and\nreturns an id if an id is not def..."},{"name":"getInnerHeight","doc":"Returns the height in pixels of the body element (not including the height of any framing element..."},{"name":"getInnerWidth","doc":"Returns the width in pixels of the body element (not including the width of any framing elements)..."},{"name":"getItem","doc":"Gets the specified tab by id."},{"name":"getItemId","doc":"Returns the itemId of this component.  If an\nitemId was not assigned through configuration the\nid..."},{"name":"getLayout","doc":"Returns the layout currently in use by the container.  If the container does not currently have a..."},{"name":"getLayoutTarget","doc":"Returns the Element to be used to contain the child Components of this Container.\nAn implementati..."},{"name":"getOuterSize","doc":"Gets the current size of the component's underlying element, including space taken by its margins."},{"name":"getPosition","doc":"Gets the current XY position of the component's underlying element."},{"name":"getResizeEl","doc":"Returns the outermost Element of this Component which defines the Components overall size.\nUsuall..."},{"name":"getSize","doc":"Gets the current size of the component's underlying element."},{"name":"getTabEl","doc":"Gets the DOM element for the tab strip item which activates the child panel with the specified\nID..."},{"name":"getTemplateArgs","doc":"Provides template arguments for rendering a tab selector item in the tab strip.\nThis method retur..."},{"name":"getTool","doc":"Retrieve a tool by id."},{"name":"getTopToolbar","doc":"Returns the toolbar from the top (tbar) section of the panel."},{"name":"getUpdater","doc":"Get the CQ.Ext.Updater for this panel. Enables you to perform Ajax updates of this panel's body."},{"name":"getWidth","doc":"Gets the current width of the component's underlying element."},{"name":"getXType","doc":"Gets the xtype for this component as registered with CQ.Ext.ComponentMgr. For a list of all\navail..."},{"name":"getXTypes","doc":"Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all\navailable..."},{"name":"hasClass","doc":"Checks if the component's underlying element has the specified CSS class."},{"name":"hide","doc":"Hide this component.  Listen to the 'beforehide' event and return\nfalse to cancel hiding the comp..."},{"name":"hideTabStripItem","doc":"Hides the tab strip item for the passed tab"},{"name":"insert","doc":"Inserts a Component into this Container at a specified index. Fires the\nbeforeadd event before in..."},{"name":"isVisible","doc":"Returns true if this component is visible."},{"name":"isXType","doc":"Tests whether or not this Component is of a specific xtype. This can test whether this Component ..."},{"name":"load","doc":"Loads this content panel immediately with content returned from an XHR call."},{"name":"mon","doc":"Adds listeners to any Observable object (or Elements) which are automatically removed when this C..."},{"name":"mun","doc":"Removes listeners that were added by the mon method."},{"name":"nextSibling","doc":"Returns the next component in the owning container"},{"name":"previousSibling","doc":"Returns the previous component in the owning container"},{"name":"readTabs","doc":"True to scan the markup in this tab panel for autoTabs using the\nautoTabSelector"},{"name":"relayEvents","doc":"Relays selected events from the specified Observable as if the events were fired by this."},{"name":"remove","doc":"Removes a component from this container.  Fires the beforeremove event before removing, then fire..."},{"name":"removeAll","doc":"Removes all components from this container."},{"name":"removeClass","doc":"Removes a CSS class from the component's underlying element."},{"name":"render","doc":"Render this Component into the passed HTML element.\nIf you are using a Container object to house ..."},{"name":"scrollToTab","doc":"Scrolls to a particular tab if tab scrolling is enabled"},{"name":"setActiveTab","doc":"Sets the specified tab as the active tab. This method fires the beforetabchange event which\ncan r..."},{"name":"setAutoScroll","doc":"Sets the overflow on the content element of the component."},{"name":"setDisabled","doc":"Convenience function for setting disabled\/enabled by boolean."},{"name":"setHeight","doc":"Sets the height of the component.  This method fires the resize event."},{"name":"setIconClass","doc":"Sets the CSS class that provides the icon image for this panel.  This method will replace any exi..."},{"name":"setPagePosition","doc":"Sets the page XY position of the component.  To set the left and top instead, use setPosition.\nTh..."},{"name":"setPosition","doc":"Sets the left and top of the component.  To set the page XY position instead, use setPagePosition..."},{"name":"setSize","doc":"Sets the width and height of this BoxComponent. This method fires the resize event. This method c..."},{"name":"setTitle","doc":"Sets the title text for the panel and optionally the icon class.\nIn order to be able to set the t..."},{"name":"setVisible","doc":"Convenience function to hide or show this component by boolean."},{"name":"setWidth","doc":"Sets the width of the component.  This method fires the resize event."},{"name":"show","doc":"Show this component.  Listen to the 'beforeshow' event and return\nfalse to cancel showing the com..."},{"name":"syncSize","doc":"Force the component's size to recalculate based on the underlying element's current height and wi..."},{"name":"toggleCollapse","doc":"Shortcut for performing an expand or collapse based on the current state of the panel."},{"name":"unhideTabStripItem","doc":"Unhides the tab strip item for the passed tab"},{"name":"update","doc":"Update the content area of a component."},{"name":"updateBox","doc":"Sets the current box measurements of the component's underlying element."}],"events":[{"name":"activate","doc":"Fires after the Panel has been visually activated.\nNote that Panels do not directly support being..."},{"name":"add","doc":"@bubbles\nFires after any CQ.Ext.Component is added or inserted into the container."},{"name":"added","doc":"Fires when a component is added to an CQ.Ext.Container"},{"name":"afterlayout","doc":"Fires when the components in this container are arranged by the associated layout manager."},{"name":"afterrender","doc":"Fires after the component rendering is finished.\nThe afterrender event is fired after this Compon..."},{"name":"beforeadd","doc":"Fires before any CQ.Ext.Component is added or inserted into the container.\nA handler can return f..."},{"name":"beforeclose","doc":"Fires before the Panel is closed.  Note that Panels do not directly support being closed, but som..."},{"name":"beforecollapse","doc":"Fires before the Panel is collapsed.  A handler can return false to cancel the collapse."},{"name":"beforedestroy","doc":"Fires before the component is destroyed. Return false from an event handler to stop the destroy."},{"name":"beforeexpand","doc":"Fires before the Panel is expanded.  A handler can return false to cancel the expand."},{"name":"beforehide","doc":"Fires before the component is hidden by calling the hide method.\nReturn false from an event handl..."},{"name":"beforeremove","doc":"Fires before any CQ.Ext.Component is removed from the container.  A handler can return\nfalse to c..."},{"name":"beforerender","doc":"Fires before the component is rendered. Return false from an\nevent handler to stop the render."},{"name":"beforeshow","doc":"Fires before the component is shown by calling the show method.\nReturn false from an event handle..."},{"name":"beforestaterestore","doc":"Fires before the state of the component is restored. Return false from an event handler to stop t..."},{"name":"beforestatesave","doc":"Fires before the state of the component is saved to the configured state provider. Return false t..."},{"name":"beforetabchange","doc":"Fires before the active tab changes. Handlers can return false to cancel the tab change."},{"name":"bodyresize","doc":"Fires after the Panel has been resized."},{"name":"close","doc":"Fires after the Panel is closed.  Note that Panels do not directly support being closed, but some..."},{"name":"collapse","doc":"Fires after the Panel has been collapsed."},{"name":"contextmenu","doc":"Relays the contextmenu event from a tab selector element in the tab strip."},{"name":"deactivate","doc":"Fires after the Panel has been visually deactivated.\nNote that Panels do not directly support bei..."},{"name":"destroy","doc":"Fires after the component is destroyed."},{"name":"disable","doc":"Fires after the component is disabled."},{"name":"enable","doc":"Fires after the component is enabled."},{"name":"expand","doc":"Fires after the Panel has been expanded."},{"name":"hide","doc":"Fires after the component is hidden.\nFires after the component is hidden when calling the hide me..."},{"name":"iconchange","doc":"Fires after the Panel icon class has been set or changed."},{"name":"move","doc":"Fires after the component is moved."},{"name":"remove","doc":"@bubbles\nFires after any CQ.Ext.Component is removed from the container."},{"name":"removed","doc":"Fires when a component is removed from an CQ.Ext.Container"},{"name":"render","doc":"Fires after the component markup is rendered."},{"name":"resize","doc":"Fires after the component is resized."},{"name":"show","doc":"Fires after the component is shown when calling the show method."},{"name":"staterestore","doc":"Fires after the state of the component is restored."},{"name":"statesave","doc":"Fires after the state of the component is saved to the configured state provider."},{"name":"tabchange","doc":"Fires after the active tab has changed."},{"name":"titlechange","doc":"Fires after the Panel title has been set or changed."}]}