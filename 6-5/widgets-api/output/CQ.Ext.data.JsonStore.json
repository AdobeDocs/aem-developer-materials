{"name":"CQ.Ext.data.JsonStore","doc":"Small helper class to make creating CQ.Ext.data.Stores from JSON data easier.\nA JsonStore will be...","configs":[{"name":"autoDestroy","doc":"true to destroy the store when the component the store is bound to is destroyed (defaults to fals..."},{"name":"autoLoad","doc":"If data is not specified, and if autoLoad is true or an Object, this store's load method is autom..."},{"name":"autoSave","doc":"Defaults to true causing the store to automatically save records to the server when a record is m..."},{"name":"baseParams","doc":"An object containing properties which are to be sent as parameters for every HTTP request. Parame..."},{"name":"batch","doc":"Defaults to true (unless restful:true). Multiple requests for each CRUD action (CREATE, READ, UPD..."},{"name":"data","doc":"An inline data object readable by the reader. Typically this option, or the url option will be sp..."},{"name":"defaultParamNames","doc":"Provides the default values for the paramNames property. To globally modify the parameters for al..."},{"name":"paramNames","doc":"An object containing properties which specify the names of the paging and sorting parameters pass..."},{"name":"proxy","doc":"The DataProxy object which provides access to a data object. See url."},{"name":"pruneModifiedRecords","doc":"true to clear all modified record information each time the store is loaded or when a record is r..."},{"name":"reader","doc":"The Reader object which processes the data object and returns an Array of CQ.Ext.data.Record obje..."},{"name":"remoteSort","doc":"true if sorting is to be handled by requesting the Proxy to provide a refreshed version of the da..."},{"name":"restful","doc":"Defaults to false. Set to true to have the Store and the set Proxy operate in a RESTful manner. T..."},{"name":"sortInfo","doc":"A config object to specify the sort order in the request of a Store's load operation. Note that f..."},{"name":"storeId","doc":"If passed, the id to use to register with the StoreMgr. Note: if a (deprecated) id is specified i..."},{"name":"url","doc":"If a proxy is not specified the url will be used to implicitly configure a HttpProxy if an url is..."},{"name":"writer","doc":"The Writer object which processes a record object for being written to the server-side database. ..."}],"props":[{"name":"baseParams","doc":"See the corresponding configuration option\nfor a description of this property.\nTo modify this pro..."},{"name":"fields","doc":"A MixedCollection containing the defined Fields\nfor the Records stored in this Store. Read-only."},{"name":"isDestroyed","doc":""},{"name":"lastOptions","doc":"Contains the last options object used as the parameter to the load method. See load\nfor the detai..."},{"name":"multiSort","doc":""},{"name":"multiSortInfo","doc":"Object containing overall sort direction and an ordered array of sorter configs used when sorting..."},{"name":"recordType","doc":"The Record constructor as supplied to (or created by) the\nReader. Read-only.\nIf the Reader was co..."}],"methods":[{"name":"add","doc":"Add Records to the Store and fires the add event.  To add Records\nto the store from a remote sour..."},{"name":"addSorted","doc":"(Local sort only) Inserts the passed Record into the Store at the index where it\nshould go based ..."},{"name":"clearFilter","doc":"Revert to a view of the Record cache with no filtering applied."},{"name":"collect","doc":"Collects unique values for a particular dataIndex from this store."},{"name":"commitChanges","doc":"Commit all Records with outstanding changes. To handle updates for changes,\nsubscribe to the Stor..."},{"name":"destroy","doc":"Destroys the store."},{"name":"each","doc":"Calls the specified function for each of the Records in the cache."},{"name":"enableBubble","doc":"Enables events fired by this Observable to bubble up an owner hierarchy by calling\nthis.getBubble..."},{"name":"filter","doc":"Filter the records by a specified property. Alternatively, pass an array of filter\noptions to fil..."},{"name":"filterBy","doc":"Filter by a function. The specified function will be called for each\nRecord in this Store. If the..."},{"name":"find","doc":"Finds the index of the first matching Record in this store by a specific field value."},{"name":"findBy","doc":"Find the index of the first matching Record in this Store by a function.\nIf the function returns ..."},{"name":"findExact","doc":"Finds the index of the first matching Record in this store by a specific field value."},{"name":"getAt","doc":"Get the Record at the specified index."},{"name":"getById","doc":"Get the Record with the specified id."},{"name":"getCount","doc":"Gets the number of cached records.\nIf using paging, this may not be the total size of the dataset..."},{"name":"getModifiedRecords","doc":"Gets all records modified since the last commit.  Modified records are\npersisted across load oper..."},{"name":"getRange","doc":"Returns a range of Records between specified indices."},{"name":"getSortState","doc":"Returns an object describing the current sort state of this Store."},{"name":"getTotalCount","doc":"Gets the total number of records in the dataset as returned by the server.\nIf using paging, for t..."},{"name":"indexOf","doc":"Get the index within the cache of the passed Record."},{"name":"indexOfId","doc":"Get the index within the cache of the Record with the passed id."},{"name":"insert","doc":"Inserts Records into the Store at the given index and fires the add event.\nSee also add and addSo..."},{"name":"isFiltered","doc":"Returns true if this store is currently filtered"},{"name":"load","doc":"Loads the Record cache from the configured proxy using the configured reader.\nNotes:\nImportant: l..."},{"name":"loadData","doc":"Loads data from a passed data block and fires the load event. A DataReader\nwhich understands the ..."},{"name":"multiSort","doc":"Sorts the contents of this store by multiple field\/direction sorters. This is called internally b..."},{"name":"query","doc":"Query the records by a specified property."},{"name":"queryBy","doc":"Query the cached records in this Store using a filtering function. The specified function\nwill be..."},{"name":"rejectChanges","doc":"Reject outstanding changes on all modified records."},{"name":"relayEvents","doc":"Relays selected events from the specified Observable as if the events were fired by this."},{"name":"reload","doc":"Reloads the Record cache from the configured Proxy using the configured\nDataReader and the option..."},{"name":"remove","doc":"Remove Records from the Store and fires the remove event."},{"name":"removeAll","doc":"Remove all Records from the Store and fires the clear event."},{"name":"removeAt","doc":"Remove a Record from the Store at the specified index. Fires the remove event."},{"name":"save","doc":"Saves all pending changes to the store.  If the commensurate CQ.Ext.data.Api.actions action is no..."},{"name":"setBaseParam","doc":"Set the value for a property name in this store's baseParams.  Usage:myStore.setBaseParam('foo', ..."},{"name":"setDefaultSort","doc":"Sets the default sort column and order to be used by the next load operation."},{"name":"singleSort","doc":"Sorts the store contents by a single field and direction. This is called internally by sort and w..."},{"name":"sort","doc":"Sort the Records.\nIf remote sorting is used, the sort is performed on the server, and the cache i..."},{"name":"sum","doc":"Sums the value of property for each record between start\nand end and returns the result."}],"events":[{"name":"add","doc":"Fires when Records have been added to the Store"},{"name":"beforeload","doc":"Fires before a request is made for a new data object.  If the beforeload handler returns\nfalse th..."},{"name":"beforesave","doc":"Fires before a save action is called. A save encompasses destroying records, updating records and..."},{"name":"beforewrite","doc":""},{"name":"clear","doc":"Fires when the data cache has been cleared."},{"name":"datachanged","doc":"Fires when the data cache has changed in a bulk manner (e.g., it has been sorted, filtered, etc.)..."},{"name":"exception","doc":"Fires if an exception occurs in the Proxy during a remote request.\nThis event is relayed through ..."},{"name":"load","doc":"Fires after a new set of Records has been loaded."},{"name":"loadexception","doc":"This event is deprecated in favor of the catch-all exception\nevent instead.\nThis event is relayed..."},{"name":"metachange","doc":"Fires when this store's reader provides new metadata (fields). This is currently only supported f..."},{"name":"remove","doc":"Fires when a Record has been removed from the Store"},{"name":"save","doc":"Fires after a save is completed. A save encompasses destroying records, updating records and crea..."},{"name":"update","doc":"Fires when a Record has been updated"},{"name":"write","doc":"Fires if the server returns 200 after an CQ.Ext.data.Api.actions CRUD action.\nSuccess of the acti..."}]}