{"name":"CQ.Static","doc":"The Static can be used to display arbitrary text or HTML.","configs":[{"name":"allowDomMove","doc":"Whether the component can move the Dom node when rendering (defaults to true)."},{"name":"anchor","doc":"Note: this config is only used when this Component is rendered by a Container which has been conf..."},{"name":"applyTo","doc":"Specify the id of the element, a DOM element or an existing Element corresponding to a DIV that i..."},{"name":"autoEl","doc":"A tag name or DomHelper spec used to create the Element which will encapsulate this Component. Yo..."},{"name":"autoHeight","doc":"True to use height:'auto', false to use fixed height (or allow it to be managed by its parent Con..."},{"name":"autoScroll","doc":"true to use overflow:'auto' on the components layout element and show scroll bars automatically w..."},{"name":"autoShow","doc":"True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and r..."},{"name":"autoWidth","doc":"True to use width:'auto', false to use fixed width (or allow it to be managed by its parent Conta..."},{"name":"bold","doc":"True to use bold font (defaults to false)."},{"name":"bottommargin","doc":"True to use the default bottom margin of Static (defaults to false)."},{"name":"boxMaxHeight","doc":"The maximum value in pixels which this BoxComponent will set its height to. Warning: This will ov..."},{"name":"boxMaxWidth","doc":"The maximum value in pixels which this BoxComponent will set its width to. Warning: This will ove..."},{"name":"boxMinHeight","doc":"The minimum value in pixels which this BoxComponent will set its height to. Warning: This will ov..."},{"name":"boxMinWidth","doc":"The minimum value in pixels which this BoxComponent will set its width to. Warning: This will ove..."},{"name":"bubbleEvents","doc":"An array of events that, when fired, should be bubbled to any parent container. See CQ.Ext.util.O..."},{"name":"clearCls","doc":"The CSS class used to to apply to the special clearing div rendered directly after each form fiel..."},{"name":"cls","doc":"An optional extra CSS class that will be added to this component's Element (defaults to ''). This..."},{"name":"contentEl","doc":"Optional. Specify an existing HTML element, or the id of an existing HTML element to use as the c..."},{"name":"ctCls","doc":"An optional extra CSS class that will be added to this component's container. This can be useful ..."},{"name":"data","doc":"The initial set of data to apply to the tpl to update the content area of the Component."},{"name":"disabled","doc":"Render this component disabled (default is false)."},{"name":"disabledClass","doc":"CSS class added to the component when it is disabled (defaults to 'x-item-disabled')."},{"name":"fieldDescription","doc":"The text to display below this component (defaults to ''). Note: this config is only used when th..."},{"name":"fieldLabel","doc":"The label text to display next to this Component (defaults to ''). Note: this config is only used..."},{"name":"fieldSubLabel","doc":"The text to display below the fieldLabel (defaults to ''). Note: this config is only used when th..."},{"name":"flex","doc":"Note: this config is only used when this Component is rendered by a Container which has been conf..."},{"name":"height","doc":"The height of this component in pixels (defaults to auto). Note to express this dimension as a pe..."},{"name":"hidden","doc":"Render this component hidden (default is false). If true, the hide method will be called internally."},{"name":"hideLabel","doc":"true to completely hide the label element (label and separator). Defaults to false. By default, e..."},{"name":"hideMode","doc":"How this component should be hidden. Supported values are 'visibility' (css visibility), 'offsets..."},{"name":"hideParent","doc":"True to hide and show the component's container when hide\/show is called on the component, false ..."},{"name":"href","doc":"The hypertext reference for links."},{"name":"html","doc":"The HTML to display. Displayed only if text is empty."},{"name":"id","doc":"The unique id of this component (defaults to an auto-assigned id). You should assign an id if you..."},{"name":"italic","doc":"True to align the text right. Does only apply if tag is a block element (defaults to false)."},{"name":"itemCls","doc":"Note: this config is only used when this Component is rendered by a Container which has been conf..."},{"name":"itemId","doc":"An itemId can be used as an alternative way to get a reference to a component when no object refe..."},{"name":"labelSeparator","doc":"The separator to display after the text of each fieldLabel. This property may be configured at va..."},{"name":"labelStyle","doc":"A CSS style specification string to apply directly to this field's label. Defaults to the contain..."},{"name":"margins","doc":"Note: this config is only used when this BoxComponent is rendered by a Container which has been c..."},{"name":"noWrap","doc":"True to avoid wrapping at any white space (defaults to false)."},{"name":"overCls","doc":"An optional extra CSS class that will be added to this component's Element when the mouse moves o..."},{"name":"pageX","doc":"The page level x coordinate for this component if contained within a positioning container."},{"name":"pageY","doc":"The page level y coordinate for this component if contained within a positioning container."},{"name":"plugins","doc":"An object or array of objects that will provide custom functionality for this component. The only..."},{"name":"ptype","doc":"The registered ptype to create. This config option is not used when passing a config object into ..."},{"name":"ref","doc":"A path specification, relative to the Component's ownerCt specifying into which ancestor Containe..."},{"name":"region","doc":"Note: this config is only used when this BoxComponent is rendered by a Container which has been c..."},{"name":"renderTo","doc":"Specify the id of the element, a DOM element or an existing Element that this component will be r..."},{"name":"small","doc":"True to use a small font (defaults to false)."},{"name":"stateEvents","doc":"An array of events that, when fired, should trigger this component to save its state (defaults to..."},{"name":"stateId","doc":"The unique id for this component to use for state management purposes (defaults to the component ..."},{"name":"stateful","doc":"A flag which causes the Component to attempt to restore the state of internal properties from a s..."},{"name":"style","doc":"A custom style specification to be applied to this component's Element. Should be a valid argumen..."},{"name":"tabTip","doc":"Note: this config is only used when this BoxComponent is a child item of a TabPanel. A string to ..."},{"name":"tag","doc":"The tag name (defaults to \"div\" or \"a\" if href is set)."},{"name":"target","doc":"The target for links."},{"name":"text","doc":"The text to display. It will be HTML encoded before displayed."},{"name":"topmargin","doc":"True to use the default top margin of Static (defaults to false)."},{"name":"tpl","doc":"An CQ.Ext.Template, CQ.Ext.XTemplate or an array of strings to form an CQ.Ext.XTemplate. Used in ..."},{"name":"tplWriteMode","doc":"The CQ.Ext.(X)Template method to use when updating the content area of the Component. Defaults to..."},{"name":"width","doc":"The width of this component in pixels (defaults to auto). Note to express this dimension as a per..."},{"name":"x","doc":"The local x (left) coordinate for this component if contained within a positioning container."},{"name":"xtype","doc":"The registered xtype to create. This config option is not used when passing a config object into ..."},{"name":"y","doc":"The local y (top) coordinate for this component if contained within a positioning container."}],"props":[{"name":"disabled","doc":"\nTrue if this component is disabled. Read-only."},{"name":"el","doc":"The CQ.Ext.Element which encapsulates this Component. Read-only.\nThis will usually be a &lt;DIV> ..."},{"name":"hidden","doc":"\nTrue if this component is hidden. Read-only."},{"name":"initialConfig","doc":"This Component's initial configuration specification. Read-only."},{"name":"ownerCt","doc":"\nThis Component's owner Container (defaults to undefined, and is set automatically when\nthis Comp..."},{"name":"refOwner","doc":""},{"name":"rendered","doc":"\nTrue if this component has been rendered. Read-only."}],"methods":[{"name":"addClass","doc":"Adds a CSS class to the component's underlying element."},{"name":"applyToMarkup","doc":"Apply this component to existing markup that is valid. With this function, no call to render() is..."},{"name":"bubble","doc":"Bubbles up the component\/container heirarchy, calling the specified function with each component...."},{"name":"cloneConfig","doc":"Clone the current component using the original config values passed into this instance by default."},{"name":"destroy","doc":"Destroys this component by purging any event listeners, removing the component's element from the..."},{"name":"disable","doc":"Disable this component and fire the 'disable' event."},{"name":"enable","doc":"Enable this component and fire the 'enable' event."},{"name":"enableBubble","doc":"Enables events fired by this Observable to bubble up an owner hierarchy by calling\nthis.getBubble..."},{"name":"findParentBy","doc":"Find a container above this component at any level by a custom function. If the passed function r..."},{"name":"findParentByType","doc":"Find a container above this component at any level by xtype or class"},{"name":"focus","doc":"Try to focus this component."},{"name":"getBox","doc":"Gets the current box measurements of the component's underlying element."},{"name":"getBubbleTarget","doc":"Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy."},{"name":"getEl","doc":"Returns the CQ.Ext.Element which encapsulates this Component.\nThis will usually be a &lt;DIV> ele..."},{"name":"getHeight","doc":"Gets the current height of the component's underlying element."},{"name":"getId","doc":"Returns the id of this component or automatically generates and\nreturns an id if an id is not def..."},{"name":"getItemId","doc":"Returns the itemId of this component.  If an\nitemId was not assigned through configuration the\nid..."},{"name":"getOuterSize","doc":"Gets the current size of the component's underlying element, including space taken by its margins."},{"name":"getPosition","doc":"Gets the current XY position of the component's underlying element."},{"name":"getResizeEl","doc":"Returns the outermost Element of this Component which defines the Components overall size.\nUsuall..."},{"name":"getSize","doc":"Gets the current size of the component's underlying element."},{"name":"getWidth","doc":"Gets the current width of the component's underlying element."},{"name":"getXType","doc":"Gets the xtype for this component as registered with CQ.Ext.ComponentMgr. For a list of all\navail..."},{"name":"getXTypes","doc":"Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all\navailable..."},{"name":"hasClass","doc":"Checks if the component's underlying element has the specified CSS class."},{"name":"hide","doc":"Hide this component.  Listen to the 'beforehide' event and return\nfalse to cancel hiding the comp..."},{"name":"isVisible","doc":"Returns true if this component is visible."},{"name":"isXType","doc":"Tests whether or not this Component is of a specific xtype. This can test whether this Component ..."},{"name":"mon","doc":"Adds listeners to any Observable object (or Elements) which are automatically removed when this C..."},{"name":"mun","doc":"Removes listeners that were added by the mon method."},{"name":"nextSibling","doc":"Returns the next component in the owning container"},{"name":"previousSibling","doc":"Returns the previous component in the owning container"},{"name":"relayEvents","doc":"Relays selected events from the specified Observable as if the events were fired by this."},{"name":"removeClass","doc":"Removes a CSS class from the component's underlying element."},{"name":"render","doc":"Render this Component into the passed HTML element.\nIf you are using a Container object to house ..."},{"name":"setAutoScroll","doc":"Sets the overflow on the content element of the component."},{"name":"setDisabled","doc":"Convenience function for setting disabled\/enabled by boolean."},{"name":"setHeight","doc":"Sets the height of the component.  This method fires the resize event."},{"name":"setPagePosition","doc":"Sets the page XY position of the component.  To set the left and top instead, use setPosition.\nTh..."},{"name":"setPosition","doc":"Sets the left and top of the component.  To set the page XY position instead, use setPagePosition..."},{"name":"setSize","doc":"Sets the width and height of this BoxComponent. This method fires the resize event. This method c..."},{"name":"setVisible","doc":"Convenience function to hide or show this component by boolean."},{"name":"setWidth","doc":"Sets the width of the component.  This method fires the resize event."},{"name":"show","doc":"Show this component.  Listen to the 'beforeshow' event and return\nfalse to cancel showing the com..."},{"name":"syncSize","doc":"Force the component's size to recalculate based on the underlying element's current height and wi..."},{"name":"update","doc":"Update the content area of a component."},{"name":"updateBox","doc":"Sets the current box measurements of the component's underlying element."},{"name":"updateHtml","doc":"Updates the HTML of the component."},{"name":"updateText","doc":"Updates the text of the component. The specified text will be HTML encoded."}],"events":[{"name":"added","doc":"Fires when a component is added to an CQ.Ext.Container"},{"name":"afterrender","doc":"Fires after the component rendering is finished.\nThe afterrender event is fired after this Compon..."},{"name":"beforedestroy","doc":"Fires before the component is destroyed. Return false from an event handler to stop the destroy."},{"name":"beforehide","doc":"Fires before the component is hidden by calling the hide method.\nReturn false from an event handl..."},{"name":"beforerender","doc":"Fires before the component is rendered. Return false from an\nevent handler to stop the render."},{"name":"beforeshow","doc":"Fires before the component is shown by calling the show method.\nReturn false from an event handle..."},{"name":"beforestaterestore","doc":"Fires before the state of the component is restored. Return false from an event handler to stop t..."},{"name":"beforestatesave","doc":"Fires before the state of the component is saved to the configured state provider. Return false t..."},{"name":"destroy","doc":"Fires after the component is destroyed."},{"name":"disable","doc":"Fires after the component is disabled."},{"name":"enable","doc":"Fires after the component is enabled."},{"name":"hide","doc":"Fires after the component is hidden.\nFires after the component is hidden when calling the hide me..."},{"name":"move","doc":"Fires after the component is moved."},{"name":"removed","doc":"Fires when a component is removed from an CQ.Ext.Container"},{"name":"render","doc":"Fires after the component markup is rendered."},{"name":"resize","doc":"Fires after the component is resized."},{"name":"show","doc":"Fires after the component is shown when calling the show method."},{"name":"staterestore","doc":"Fires after the state of the component is restored."},{"name":"statesave","doc":"Fires after the state of the component is saved to the configured state provider."}]}