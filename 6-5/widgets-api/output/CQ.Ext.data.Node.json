{"name":"CQ.Ext.data.Node","doc":"","configs":[{"name":"id","doc":"The id for this node. If one is not specified, one is generated."},{"name":"leaf","doc":"true if this node is a leaf and does not have children"}],"props":[{"name":"attributes","doc":"The attributes supplied for the node. You can use this property to access any custom attributes y..."},{"name":"childNodes","doc":"All child nodes of this node."},{"name":"firstChild","doc":"The first direct child node of this node, or null if this node has no child nodes."},{"name":"id","doc":"The node id."},{"name":"lastChild","doc":"The last direct child node of this node, or null if this node has no child nodes."},{"name":"nextSibling","doc":"The node immediately following this node in the tree, or null if there is no sibling node."},{"name":"parentNode","doc":"The parent node for this node."},{"name":"previousSibling","doc":"The node immediately preceding this node in the tree, or null if there is no sibling node."}],"methods":[{"name":"appendChild","doc":"Insert node(s) as the last child node of this node."},{"name":"bubble","doc":"Bubbles up the tree from this node, calling the specified function with each node. The arguments ..."},{"name":"cascade","doc":"Cascades down the tree from this node, calling the specified function with each node. The argumen..."},{"name":"contains","doc":"Returns true if this node is an ancestor (at any point) of the passed node."},{"name":"destroy","doc":"Destroys the node."},{"name":"eachChild","doc":"Interates the child nodes of this node, calling the specified function with each node. The argume..."},{"name":"enableBubble","doc":"Enables events fired by this Observable to bubble up an owner hierarchy by calling\nthis.getBubble..."},{"name":"findChild","doc":"Finds the first child that has the attribute with the specified value."},{"name":"findChildBy","doc":"Finds the first child by a custom function. The child matches if the function passed returns true."},{"name":"getDepth","doc":"Returns depth of this node (the root node has a depth of 0)"},{"name":"getOwnerTree","doc":"Returns the tree this node is in."},{"name":"getPath","doc":"Returns the path for this node. The path can be used to expand or select this node programmatically."},{"name":"hasChildNodes","doc":"Returns true if this node has one or more child nodes, else false."},{"name":"indexOf","doc":"Returns the index of a child node"},{"name":"insertBefore","doc":"Inserts the first node before the second node in this nodes childNodes collection."},{"name":"isAncestor","doc":"Returns true if the passed node is an ancestor (at any point) of this node."},{"name":"isExpandable","doc":"Returns true if this node has one or more child nodes, or if the expandable\nnode attribute is exp..."},{"name":"isFirst","doc":"Returns true if this node is the first child of its parent"},{"name":"isLast","doc":"Returns true if this node is the last child of its parent"},{"name":"isLeaf","doc":"Returns true if this node is a leaf"},{"name":"item","doc":"Returns the child node at the specified index."},{"name":"relayEvents","doc":"Relays selected events from the specified Observable as if the events were fired by this."},{"name":"remove","doc":"Removes this node from its parent"},{"name":"removeAll","doc":"Removes all child nodes from this node."},{"name":"removeChild","doc":"Removes a child node from this node."},{"name":"replaceChild","doc":"Replaces one child node in this node with another."},{"name":"setId","doc":"Changes the id of this node."},{"name":"sort","doc":"Sorts this nodes children using the supplied sort function."}],"events":[{"name":"append","doc":"Fires when a new child node is appended"},{"name":"beforeappend","doc":"Fires before a new child is appended, return false to cancel the append."},{"name":"beforeinsert","doc":"Fires before a new child is inserted, return false to cancel the insert."},{"name":"beforemove","doc":"Fires before this node is moved to a new location in the tree. Return false to cancel the move."},{"name":"beforeremove","doc":"Fires before a child is removed, return false to cancel the remove."},{"name":"insert","doc":"Fires when a new child node is inserted."},{"name":"move","doc":"Fires when this node is moved to a new location in the tree"},{"name":"remove","doc":"Fires when a child node is removed"}]}