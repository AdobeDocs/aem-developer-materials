{"name":"CQ.Ext.SplitButton","doc":"A split button that provides a built-in dropdown arrow that can fire an event separately from the...","configs":[{"name":"allowDepress","doc":"False to not allow a pressed Button to be depressed (defaults to undefined). Only valid when enab..."},{"name":"allowDomMove","doc":"Whether the component can move the Dom node when rendering (defaults to true)."},{"name":"anchor","doc":"Note: this config is only used when this Component is rendered by a Container which has been conf..."},{"name":"applyTo","doc":"Specify the id of the element, a DOM element or an existing Element corresponding to a DIV that i..."},{"name":"arrowAlign","doc":"(Optional) The side of the Button box to render the arrow if the button has an associated menu. T..."},{"name":"arrowHandler","doc":"A function called when the arrow button is clicked (can be used instead of click event)"},{"name":"arrowTooltip","doc":"The title attribute of the arrow"},{"name":"autoEl","doc":"A tag name or DomHelper spec used to create the Element which will encapsulate this Component. Yo..."},{"name":"autoHeight","doc":"True to use height:'auto', false to use fixed height (or allow it to be managed by its parent Con..."},{"name":"autoScroll","doc":"true to use overflow:'auto' on the components layout element and show scroll bars automatically w..."},{"name":"autoShow","doc":"True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and r..."},{"name":"autoWidth","doc":"True to use width:'auto', false to use fixed width (or allow it to be managed by its parent Conta..."},{"name":"boxMaxHeight","doc":"The maximum value in pixels which this BoxComponent will set its height to. Warning: This will ov..."},{"name":"boxMaxWidth","doc":"The maximum value in pixels which this BoxComponent will set its width to. Warning: This will ove..."},{"name":"boxMinHeight","doc":"The minimum value in pixels which this BoxComponent will set its height to. Warning: This will ov..."},{"name":"boxMinWidth","doc":"The minimum value in pixels which this BoxComponent will set its width to. Warning: This will ove..."},{"name":"bubbleEvents","doc":"An array of events that, when fired, should be bubbled to any parent container. See CQ.Ext.util.O..."},{"name":"buttonSelector","doc":"(Optional) A DomQuery selector which is used to extract the active, clickable element from the DO..."},{"name":"clearCls","doc":"The CSS class used to to apply to the special clearing div rendered directly after each form fiel..."},{"name":"clickEvent","doc":"The DOM event that will fire the handler of the button. This can be any valid event name (dblclic..."},{"name":"cls","doc":"An optional extra CSS class that will be added to this component's Element (defaults to ''). This..."},{"name":"contentEl","doc":"Optional. Specify an existing HTML element, or the id of an existing HTML element to use as the c..."},{"name":"ctCls","doc":"An optional extra CSS class that will be added to this component's container. This can be useful ..."},{"name":"data","doc":"The initial set of data to apply to the tpl to update the content area of the Component."},{"name":"disabled","doc":"Render this component disabled (default is false)."},{"name":"disabledClass","doc":"CSS class added to the component when it is disabled (defaults to 'x-item-disabled')."},{"name":"enableToggle","doc":"True to enable pressed\/not pressed toggling (defaults to false)"},{"name":"fieldDescription","doc":"The text to display below this component (defaults to ''). Note: this config is only used when th..."},{"name":"fieldLabel","doc":"The label text to display next to this Component (defaults to ''). Note: this config is only used..."},{"name":"fieldSubLabel","doc":"The text to display below the fieldLabel (defaults to ''). Note: this config is only used when th..."},{"name":"flex","doc":"Note: this config is only used when this Component is rendered by a Container which has been conf..."},{"name":"handleMouseEvents","doc":"False to disable visual cues on mouseover, mouseout and mousedown (defaults to true)"},{"name":"handler","doc":"A function called when the button is clicked (can be used instead of click event). The handler is..."},{"name":"height","doc":"The height of this component in pixels (defaults to auto). Note to express this dimension as a pe..."},{"name":"hidden","doc":"Render this component hidden (default is false). If true, the hide method will be called internally."},{"name":"hideLabel","doc":"true to completely hide the label element (label and separator). Defaults to false. By default, e..."},{"name":"hideMode","doc":"How this component should be hidden. Supported values are 'visibility' (css visibility), 'offsets..."},{"name":"hideParent","doc":"True to hide and show the component's container when hide\/show is called on the component, false ..."},{"name":"html","doc":"An HTML fragment, or a DomHelper specification to use as the layout element content (defaults to ..."},{"name":"icon","doc":"The path to an image to display in the button (the image will be set as the background-image CSS ..."},{"name":"iconAlign","doc":"(Optional) The side of the Button box to render the icon. Four values are allowed:  'top' 'right'..."},{"name":"iconCls","doc":"A css class which sets a background image to be used as the icon for this button"},{"name":"id","doc":"The unique id of this component (defaults to an auto-assigned id). You should assign an id if you..."},{"name":"itemCls","doc":"Note: this config is only used when this Component is rendered by a Container which has been conf..."},{"name":"itemId","doc":"An itemId can be used as an alternative way to get a reference to a component when no object refe..."},{"name":"labelSeparator","doc":"The separator to display after the text of each fieldLabel. This property may be configured at va..."},{"name":"labelStyle","doc":"A CSS style specification string to apply directly to this field's label. Defaults to the contain..."},{"name":"margins","doc":"Note: this config is only used when this BoxComponent is rendered by a Container which has been c..."},{"name":"menu","doc":"Standard menu attribute consisting of a reference to a menu object, a menu id or a menu config bl..."},{"name":"menuAlign","doc":"The position to align the menu to (see CQ.Ext.Element.alignTo for more details, defaults to 'tl-b..."},{"name":"minWidth","doc":"The minimum width for this button (used to give a set of buttons a common width). See also CQ.Ext..."},{"name":"overCls","doc":"An optional extra CSS class that will be added to this component's Element when the mouse moves o..."},{"name":"overflowText","doc":"If used in a Toolbar, the text to be used if this item is shown in the overflow menu. See also CQ..."},{"name":"pageX","doc":"The page level x coordinate for this component if contained within a positioning container."},{"name":"pageY","doc":"The page level y coordinate for this component if contained within a positioning container."},{"name":"plugins","doc":"An object or array of objects that will provide custom functionality for this component. The only..."},{"name":"pressed","doc":"True to start pressed (only if enableToggle = true)"},{"name":"ptype","doc":"The registered ptype to create. This config option is not used when passing a config object into ..."},{"name":"ref","doc":"A path specification, relative to the Component's ownerCt specifying into which ancestor Containe..."},{"name":"region","doc":"Note: this config is only used when this BoxComponent is rendered by a Container which has been c..."},{"name":"renderTo","doc":"Specify the id of the element, a DOM element or an existing Element that this component will be r..."},{"name":"repeat","doc":"True to repeat fire the click event while the mouse is down. This can also be a ClickRepeater con..."},{"name":"scale","doc":"(Optional) The size of the Button. Three values are allowed:  'small'Results in the button elemen..."},{"name":"scope","doc":"The scope (this reference) in which the handler and toggleHandler is executed. Defaults to this B..."},{"name":"stateEvents","doc":"An array of events that, when fired, should trigger this component to save its state (defaults to..."},{"name":"stateId","doc":"The unique id for this component to use for state management purposes (defaults to the component ..."},{"name":"stateful","doc":"A flag which causes the Component to attempt to restore the state of internal properties from a s..."},{"name":"style","doc":"A custom style specification to be applied to this component's Element. Should be a valid argumen..."},{"name":"tabIndex","doc":"Set a DOM tabIndex for this button (defaults to undefined)"},{"name":"tabTip","doc":"Note: this config is only used when this BoxComponent is a child item of a TabPanel. A string to ..."},{"name":"template","doc":"(Optional) A Template used to create the Button's DOM structure. Instances, or subclasses which n..."},{"name":"text","doc":"The button text to be used as innerHTML (html tags are accepted)"},{"name":"toggleGroup","doc":"The group this toggle button is a member of (only 1 per group can be pressed)"},{"name":"toggleHandler","doc":"Function called when a Button with enableToggle set to true is clicked. Two arguments are passed:..."},{"name":"tooltip","doc":"The tooltip for the button - can be a string to be used as innerHTML (html tags are accepted) or ..."},{"name":"tooltipType","doc":"The type of tooltip to use. Either 'qtip' (default) for QuickTips or 'title' for title attribute."},{"name":"tpl","doc":"An CQ.Ext.Template, CQ.Ext.XTemplate or an array of strings to form an CQ.Ext.XTemplate. Used in ..."},{"name":"tplWriteMode","doc":"The CQ.Ext.(X)Template method to use when updating the content area of the Component. Defaults to..."},{"name":"type","doc":"submit, reset or button - defaults to 'button'"},{"name":"width","doc":"The width of this component in pixels (defaults to auto). Note to express this dimension as a per..."},{"name":"x","doc":"The local x (left) coordinate for this component if contained within a positioning container."},{"name":"xtype","doc":"The registered xtype to create. This config option is not used when passing a config object into ..."},{"name":"y","doc":"The local y (top) coordinate for this component if contained within a positioning container."}],"props":[{"name":"btnEl","doc":"An Element encapsulating the Button's clickable element. By default,\nthis references a &lt;button..."},{"name":"disabled","doc":"\nTrue if this component is disabled. Read-only."},{"name":"el","doc":"The CQ.Ext.Element which encapsulates this Component. Read-only.\nThis will usually be a &lt;DIV> ..."},{"name":"hidden","doc":"\nTrue if this component is hidden. Read-only."},{"name":"initialConfig","doc":"This Component's initial configuration specification. Read-only."},{"name":"menu","doc":""},{"name":"ownerCt","doc":"\nThis Component's owner Container (defaults to undefined, and is set automatically when\nthis Comp..."},{"name":"pressed","doc":"Read-only. True if this button is pressed (only if enableToggle = true)"},{"name":"refOwner","doc":""},{"name":"rendered","doc":"\nTrue if this component has been rendered. Read-only."}],"methods":[{"name":"addClass","doc":"Adds a CSS class to the component's underlying element."},{"name":"applyToMarkup","doc":"Apply this component to existing markup that is valid. With this function, no call to render() is..."},{"name":"bubble","doc":"Bubbles up the component\/container heirarchy, calling the specified function with each component...."},{"name":"cloneConfig","doc":"Clone the current component using the original config values passed into this instance by default."},{"name":"destroy","doc":"Destroys this component by purging any event listeners, removing the component's element from the..."},{"name":"disable","doc":"Disable this component and fire the 'disable' event."},{"name":"enable","doc":"Enable this component and fire the 'enable' event."},{"name":"enableBubble","doc":"Enables events fired by this Observable to bubble up an owner hierarchy by calling\nthis.getBubble..."},{"name":"findParentBy","doc":"Find a container above this component at any level by a custom function. If the passed function r..."},{"name":"findParentByType","doc":"Find a container above this component at any level by xtype or class"},{"name":"focus","doc":"Try to focus this component."},{"name":"getBox","doc":"Gets the current box measurements of the component's underlying element."},{"name":"getBubbleTarget","doc":"Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy."},{"name":"getEl","doc":"Returns the CQ.Ext.Element which encapsulates this Component.\nThis will usually be a &lt;DIV> ele..."},{"name":"getHeight","doc":"Gets the current height of the component's underlying element."},{"name":"getId","doc":"Returns the id of this component or automatically generates and\nreturns an id if an id is not def..."},{"name":"getItemId","doc":"Returns the itemId of this component.  If an\nitemId was not assigned through configuration the\nid..."},{"name":"getOuterSize","doc":"Gets the current size of the component's underlying element, including space taken by its margins."},{"name":"getPosition","doc":"Gets the current XY position of the component's underlying element."},{"name":"getPressed","doc":"Gets the pressed button in the passed group or null"},{"name":"getResizeEl","doc":"Returns the outermost Element of this Component which defines the Components overall size.\nUsuall..."},{"name":"getSize","doc":"Gets the current size of the component's underlying element."},{"name":"getTemplateArgs","doc":"This method returns an Array which provides substitution parameters for the Template used\nto crea..."},{"name":"getText","doc":"Gets the text for this Button"},{"name":"getWidth","doc":"Gets the current width of the component's underlying element."},{"name":"getXType","doc":"Gets the xtype for this component as registered with CQ.Ext.ComponentMgr. For a list of all\navail..."},{"name":"getXTypes","doc":"Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all\navailable..."},{"name":"hasClass","doc":"Checks if the component's underlying element has the specified CSS class."},{"name":"hasVisibleMenu","doc":"Returns true if the button has a menu and it is visible"},{"name":"hide","doc":"Hide this component.  Listen to the 'beforehide' event and return\nfalse to cancel hiding the comp..."},{"name":"hideMenu","doc":"Hide this button's menu (if it has one)"},{"name":"initComponent","doc":""},{"name":"isVisible","doc":"Returns true if this component is visible."},{"name":"isXType","doc":"Tests whether or not this Component is of a specific xtype. This can test whether this Component ..."},{"name":"mon","doc":"Adds listeners to any Observable object (or Elements) which are automatically removed when this C..."},{"name":"mun","doc":"Removes listeners that were added by the mon method."},{"name":"nextSibling","doc":"Returns the next component in the owning container"},{"name":"previousSibling","doc":"Returns the previous component in the owning container"},{"name":"relayEvents","doc":"Relays selected events from the specified Observable as if the events were fired by this."},{"name":"removeClass","doc":"Removes a CSS class from the component's underlying element."},{"name":"render","doc":"Render this Component into the passed HTML element.\nIf you are using a Container object to house ..."},{"name":"setArrowHandler","doc":"Sets this button's arrow click handler."},{"name":"setAutoScroll","doc":"Sets the overflow on the content element of the component."},{"name":"setDisabled","doc":"Convenience function for setting disabled\/enabled by boolean."},{"name":"setHandler","doc":"Assigns this Button's click handler"},{"name":"setHeight","doc":"Sets the height of the component.  This method fires the resize event."},{"name":"setIcon","doc":"Sets the background image (inline style) of the button.  This method also changes\nthe value of th..."},{"name":"setIconClass","doc":"Sets the CSS class that provides a background image to use as the button's icon.  This method als..."},{"name":"setPagePosition","doc":"Sets the page XY position of the component.  To set the left and top instead, use setPosition.\nTh..."},{"name":"setPosition","doc":"Sets the left and top of the component.  To set the page XY position instead, use setPagePosition..."},{"name":"setSize","doc":"Sets the width and height of this BoxComponent. This method fires the resize event. This method c..."},{"name":"setText","doc":"Sets this Button's text"},{"name":"setTooltip","doc":"Sets the tooltip for this Button."},{"name":"setVisible","doc":"Convenience function to hide or show this component by boolean."},{"name":"setWidth","doc":"Sets the width of the component.  This method fires the resize event."},{"name":"show","doc":"Show this component.  Listen to the 'beforeshow' event and return\nfalse to cancel showing the com..."},{"name":"showMenu","doc":"Show this button's menu (if it has one)"},{"name":"syncSize","doc":"Force the component's size to recalculate based on the underlying element's current height and wi..."},{"name":"toggle","doc":"If a state it passed, it becomes the pressed state otherwise the current state is toggled."},{"name":"update","doc":"Update the content area of a component."},{"name":"updateBox","doc":"Sets the current box measurements of the component's underlying element."}],"events":[{"name":"added","doc":"Fires when a component is added to an CQ.Ext.Container"},{"name":"afterrender","doc":"Fires after the component rendering is finished.\nThe afterrender event is fired after this Compon..."},{"name":"arrowclick","doc":"Fires when this button's arrow is clicked"},{"name":"beforedestroy","doc":"Fires before the component is destroyed. Return false from an event handler to stop the destroy."},{"name":"beforehide","doc":"Fires before the component is hidden by calling the hide method.\nReturn false from an event handl..."},{"name":"beforerender","doc":"Fires before the component is rendered. Return false from an\nevent handler to stop the render."},{"name":"beforeshow","doc":"Fires before the component is shown by calling the show method.\nReturn false from an event handle..."},{"name":"beforestaterestore","doc":"Fires before the state of the component is restored. Return false from an event handler to stop t..."},{"name":"beforestatesave","doc":"Fires before the state of the component is saved to the configured state provider. Return false t..."},{"name":"click","doc":"Fires when this button is clicked"},{"name":"destroy","doc":"Fires after the component is destroyed."},{"name":"disable","doc":"Fires after the component is disabled."},{"name":"enable","doc":"Fires after the component is enabled."},{"name":"hide","doc":"Fires after the component is hidden.\nFires after the component is hidden when calling the hide me..."},{"name":"menuhide","doc":"If this button has a menu, this event fires when it is hidden"},{"name":"menushow","doc":"If this button has a menu, this event fires when it is shown"},{"name":"menutriggerout","doc":"If this button has a menu, this event fires when the mouse leaves the menu triggering element"},{"name":"menutriggerover","doc":"If this button has a menu, this event fires when the mouse enters the menu triggering element"},{"name":"mouseout","doc":"Fires when the mouse exits the button"},{"name":"mouseover","doc":"Fires when the mouse hovers over the button"},{"name":"move","doc":"Fires after the component is moved."},{"name":"removed","doc":"Fires when a component is removed from an CQ.Ext.Container"},{"name":"render","doc":"Fires after the component markup is rendered."},{"name":"resize","doc":"Fires after the component is resized."},{"name":"show","doc":"Fires after the component is shown when calling the show method."},{"name":"staterestore","doc":"Fires after the state of the component is restored."},{"name":"statesave","doc":"Fires after the state of the component is saved to the configured state provider."},{"name":"toggle","doc":"Fires when the 'pressed' state of this button changes (only if enableToggle = true)"}]}