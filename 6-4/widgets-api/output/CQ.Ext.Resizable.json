{"name":"CQ.Ext.Resizable","doc":"Applies drag handles to an element to make it resizable. The drag handles are inserted into the e...","configs":[{"name":"adjustments","doc":"String 'auto' or an array [width, height] with values to be added to the resize operation's new s..."},{"name":"animate","doc":"True to animate the resize (not compatible with dynamic sizing, defaults to false)"},{"name":"constrainTo","doc":"Constrain the resize to a particular element"},{"name":"disableTrackOver","doc":"True to disable mouse tracking. This is only applied at config time. (defaults to false)"},{"name":"draggable","doc":"Convenience to initialize drag drop (defaults to false)"},{"name":"duration","doc":"Animation duration if animate = true (defaults to 0.35)"},{"name":"dynamic","doc":"True to resize the element while dragging instead of using a proxy (defaults to false)"},{"name":"easing","doc":"Animation easing if animate = true (defaults to 'easingOutStrong')"},{"name":"enabled","doc":"False to disable resizing (defaults to true)"},{"name":"handleCls","doc":"A css class to add to each handle. Defaults to ''."},{"name":"handles","doc":"String consisting of the resize handles to display (defaults to undefined). Specify either 'all' ..."},{"name":"height","doc":"The height of the element in pixels (defaults to null)"},{"name":"heightIncrement","doc":"The increment to snap the height resize in pixels (only applies if dynamic==true). Defaults to 0."},{"name":"maxHeight","doc":"The maximum height for the element (defaults to 10000)"},{"name":"maxWidth","doc":"The maximum width for the element (defaults to 10000)"},{"name":"minHeight","doc":"The minimum height for the element (defaults to 5)"},{"name":"minWidth","doc":"The minimum width for the element (defaults to 5)"},{"name":"minX","doc":"The minimum x for the element (defaults to 0)"},{"name":"minY","doc":"The minimum x for the element (defaults to 0)"},{"name":"multiDirectional","doc":"Deprecated. Deprecated style of adding multi-direction resize handles."},{"name":"pinned","doc":"True to ensure that the resize handles are always visible, false to display them only when the us..."},{"name":"preserveRatio","doc":"True to preserve the original ratio between height and width during resize (defaults to false)"},{"name":"resizeChild","doc":"True to resize the first child, or id\/element to resize (defaults to false)"},{"name":"resizeRegion","doc":"Constrain the resize to a particular region"},{"name":"transparent","doc":"True for transparent handles. This is only applied at config time. (defaults to false)"},{"name":"width","doc":"The width of the element in pixels (defaults to null)"},{"name":"widthIncrement","doc":"The increment to snap the width resize in pixels (only applies if dynamic==true). Defaults to 0."},{"name":"wrap","doc":"True to wrap an element with a div if needed (required for textareas and images, defaults to fals..."}],"props":[{"name":"proxy","doc":"The proxy Element that is resized in place of the real Element during the resize operation.\nThis ..."}],"methods":[{"name":"destroy","doc":"Destroys this resizable. If the element was wrapped and\nremoveEl is not true then the element rem..."},{"name":"enableBubble","doc":"Enables events fired by this Observable to bubble up an owner hierarchy by calling\nthis.getBubble..."},{"name":"getEl","doc":"Returns the element this component is bound to."},{"name":"getResizeChild","doc":"Returns the resizeChild element (or null)."},{"name":"relayEvents","doc":"Relays selected events from the specified Observable as if the events were fired by this."},{"name":"resizeElement","doc":"Performs resizing of the associated Element. This method is called internally by this\nclass, and ..."},{"name":"resizeTo","doc":"\nPerform a manual resize and fires the 'resize' event."}],"events":[{"name":"beforeresize","doc":"Fired before resize is allowed. Set enabled to false to cancel resize."},{"name":"resize","doc":"Fired after a resize."}]}