{"name":"CQ.Ext.menu.DateMenu","doc":"A menu containing an CQ.Ext.DatePicker Component.\nNotes:\nAlthough not listed here, the constructo...","configs":[{"name":"activeItem","doc":"A string component id or the numeric index of the component that should be initially activated wi..."},{"name":"allowDomMove","doc":"Whether the component can move the Dom node when rendering (defaults to true)."},{"name":"allowOtherMenus","doc":"True to allow multiple menus to be displayed at the same time (defaults to false)"},{"name":"anchor","doc":"Note: this config is only used when this Component is rendered by a Container which has been conf..."},{"name":"applyTo","doc":"Specify the id of the element, a DOM element or an existing Element corresponding to a DIV that i..."},{"name":"autoDestroy","doc":"If true the container will automatically destroy any contained component that is removed from it,..."},{"name":"autoEl","doc":"A tag name or DomHelper spec used to create the Element which will encapsulate this Component. Yo..."},{"name":"autoHeight","doc":"True to use height:'auto', false to use fixed height (or allow it to be managed by its parent Con..."},{"name":"autoScroll","doc":"true to use overflow:'auto' on the components layout element and show scroll bars automatically w..."},{"name":"autoShow","doc":"True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and r..."},{"name":"autoWidth","doc":"True to use width:'auto', false to use fixed width (or allow it to be managed by its parent Conta..."},{"name":"boxMaxHeight","doc":"The maximum value in pixels which this BoxComponent will set its height to. Warning: This will ov..."},{"name":"boxMaxWidth","doc":"The maximum value in pixels which this BoxComponent will set its width to. Warning: This will ove..."},{"name":"boxMinHeight","doc":"The minimum value in pixels which this BoxComponent will set its height to. Warning: This will ov..."},{"name":"boxMinWidth","doc":"The minimum value in pixels which this BoxComponent will set its width to. Warning: This will ove..."},{"name":"bubbleEvents","doc":"An array of events that, when fired, should be bubbled to any parent container. See CQ.Ext.util.O..."},{"name":"bufferResize","doc":"When set to true (50 milliseconds) or a number of milliseconds, the layout assigned for this cont..."},{"name":"clearCls","doc":"The CSS class used to to apply to the special clearing div rendered directly after each form fiel..."},{"name":"cls","doc":"An optional extra CSS class that will be added to this component's Element (defaults to ''). This..."},{"name":"contentEl","doc":"Optional. Specify an existing HTML element, or the id of an existing HTML element to use as the c..."},{"name":"ctCls","doc":"An optional extra CSS class that will be added to this component's container. This can be useful ..."},{"name":"data","doc":"The initial set of data to apply to the tpl to update the content area of the Component."},{"name":"defaultAlign","doc":"The default CQ.Ext.Element.alignTo anchor position value for this menu relative to its element of..."},{"name":"defaultOffsets","doc":"An array specifying the [x, y] offset in pixels by which to change the default Menu popup positio..."},{"name":"defaultType","doc":"The default xtype of child Components to create in this Container when a child item is specified ..."},{"name":"defaults","doc":"This option is a means of applying default settings to all added items whether added through the ..."},{"name":"disabled","doc":"Render this component disabled (default is false)."},{"name":"disabledClass","doc":"CSS class added to the component when it is disabled (defaults to 'x-item-disabled')."},{"name":"fieldDescription","doc":"The text to display below this component (defaults to ''). Note: this config is only used when th..."},{"name":"fieldLabel","doc":"The label text to display next to this Component (defaults to ''). Note: this config is only used..."},{"name":"fieldSubLabel","doc":"The text to display below the fieldLabel (defaults to ''). Note: this config is only used when th..."},{"name":"flex","doc":"Note: this config is only used when this Component is rendered by a Container which has been conf..."},{"name":"floating","doc":"By default, a Menu configured as floating:true will be rendered as an CQ.Ext.Layer (an absolutely..."},{"name":"forceLayout","doc":"If true the container will force a layout initially even if hidden or collapsed. This option is u..."},{"name":"handler","doc":"Optional. A function that will handle the select event of this menu. The handler is passed the fo..."},{"name":"height","doc":"The height of this component in pixels (defaults to auto). Note to express this dimension as a pe..."},{"name":"hidden","doc":"Render this component hidden (default is false). If true, the hide method will be called internally."},{"name":"hideBorders","doc":"True to hide the borders of each contained component, false to defer to the component's existing ..."},{"name":"hideLabel","doc":"true to completely hide the label element (label and separator). Defaults to false. By default, e..."},{"name":"hideMode","doc":"How this component should be hidden. Supported values are 'visibility' (css visibility), 'offsets..."},{"name":"hideOnClick","doc":"False to continue showing the menu after a date is selected, defaults to true."},{"name":"hideParent","doc":"True to hide and show the component's container when hide\/show is called on the component, false ..."},{"name":"html","doc":"An HTML fragment, or a DomHelper specification to use as the layout element content (defaults to ..."},{"name":"id","doc":"The unique id of this component (defaults to an auto-assigned id). You should assign an id if you..."},{"name":"ignoreParentClicks","doc":"True to ignore clicks on any item in this menu that is a parent item (displays a submenu) so that..."},{"name":"itemCls","doc":"Note: this config is only used when this Component is rendered by a Container which has been conf..."},{"name":"itemId","doc":"An itemId can be used as an alternative way to get a reference to a component when no object refe..."},{"name":"items","doc":"layout A single item, or an array of child Components to be added to this container, for example:..."},{"name":"labelSeparator","doc":"The separator to display after the text of each fieldLabel. This property may be configured at va..."},{"name":"labelStyle","doc":"A CSS style specification string to apply directly to this field's label. Defaults to the contain..."},{"name":"layout","doc":"*Important: In order for child items to be correctly sized and positioned, typically a layout man..."},{"name":"layoutConfig","doc":"This is a config object containing properties specific to the chosen layout if layout has been sp..."},{"name":"margins","doc":"Note: this config is only used when this BoxComponent is rendered by a Container which has been c..."},{"name":"minWidth","doc":"The minimum width of the menu in pixels (defaults to 120)"},{"name":"monitorResize","doc":"True to automatically monitor window resize events to handle anything that is sensitive to the cu..."},{"name":"overCls","doc":"An optional extra CSS class that will be added to this component's Element when the mouse moves o..."},{"name":"pageX","doc":"The page level x coordinate for this component if contained within a positioning container."},{"name":"pageY","doc":"The page level y coordinate for this component if contained within a positioning container."},{"name":"pickerId","doc":"An id to assign to the underlying date picker. Defaults to null."},{"name":"plain","doc":"True to remove the incised line down the left side of the menu. Defaults to false."},{"name":"plugins","doc":"An object or array of objects that will provide custom functionality for this component. The only..."},{"name":"ptype","doc":"The registered ptype to create. This config option is not used when passing a config object into ..."},{"name":"ref","doc":"A path specification, relative to the Component's ownerCt specifying into which ancestor Containe..."},{"name":"region","doc":"Note: this config is only used when this BoxComponent is rendered by a Container which has been c..."},{"name":"renderTo","doc":"Specify the id of the element, a DOM element or an existing Element that this component will be r..."},{"name":"resizeEvent","doc":"The event to listen to for resizing in layouts. Defaults to 'resize'."},{"name":"scope","doc":"The scope (this reference) in which the handler function will be called. Defaults to this DateMen..."},{"name":"shadow","doc":"True or 'sides' for the default effect, 'frame' for 4-way shadow, and 'drop' for bottom-right sha..."},{"name":"showSeparator","doc":"True to show the icon separator. (defaults to true)."},{"name":"stateEvents","doc":"An array of events that, when fired, should trigger this component to save its state (defaults to..."},{"name":"stateId","doc":"The unique id for this component to use for state management purposes (defaults to the component ..."},{"name":"stateful","doc":"A flag which causes the Component to attempt to restore the state of internal properties from a s..."},{"name":"style","doc":"A custom style specification to be applied to this component's Element. Should be a valid argumen..."},{"name":"subMenuAlign","doc":"The CQ.Ext.Element.alignTo anchor position value to use for submenus of this menu (defaults to 't..."},{"name":"tabTip","doc":"Note: this config is only used when this BoxComponent is a child item of a TabPanel. A string to ..."},{"name":"tpl","doc":"An CQ.Ext.Template, CQ.Ext.XTemplate or an array of strings to form an CQ.Ext.XTemplate. Used in ..."},{"name":"tplWriteMode","doc":"The CQ.Ext.(X)Template method to use when updating the content area of the Component. Defaults to..."},{"name":"width","doc":"The width of this component in pixels (defaults to auto). Note to express this dimension as a per..."},{"name":"x","doc":"The local x (left) coordinate for this component if contained within a positioning container."},{"name":"xtype","doc":"The registered xtype to create. This config option is not used when passing a config object into ..."},{"name":"y","doc":"The local y (top) coordinate for this component if contained within a positioning container."},{"name":"zIndex","doc":"zIndex to use when the menu is floating."}],"props":[{"name":"disabled","doc":"\nTrue if this component is disabled. Read-only."},{"name":"el","doc":"The CQ.Ext.Element which encapsulates this Component. Read-only.\nThis will usually be a &lt;DIV> ..."},{"name":"hidden","doc":"\nTrue if this component is hidden. Read-only."},{"name":"initialConfig","doc":"This Component's initial configuration specification. Read-only."},{"name":"items","doc":"The collection of components in this container as a CQ.Ext.util.MixedCollection"},{"name":"ownerCt","doc":"\nThis Component's owner Container (defaults to undefined, and is set automatically when\nthis Comp..."},{"name":"picker","doc":"\nThe CQ.Ext.DatePicker instance for this DateMenu"},{"name":"refOwner","doc":""},{"name":"rendered","doc":"\nTrue if this component has been rendered. Read-only."}],"methods":[{"name":"add","doc":"Adds Component(s) to this Container.\nDescription :\n\nFires the beforeadd event before adding\nThe C..."},{"name":"addClass","doc":"Adds a CSS class to the component's underlying element."},{"name":"addElement","doc":"Adds an CQ.Ext.Element object to the menu"},{"name":"addItem","doc":"Adds an existing object based on CQ.Ext.menu.BaseItem to the menu"},{"name":"addMenuItem","doc":"Creates a new CQ.Ext.menu.Item based an the supplied config object and adds it to the menu"},{"name":"addSeparator","doc":"Adds a separator bar to the menu"},{"name":"addText","doc":"Creates a new CQ.Ext.menu.TextItem with the supplied text and adds it to the menu"},{"name":"applyToMarkup","doc":"Apply this component to existing markup that is valid. With this function, no call to render() is..."},{"name":"bubble","doc":"Bubbles up the component\/container heirarchy, calling the specified function with each component...."},{"name":"cascade","doc":"Cascades down the component\/container heirarchy from this component (called first), calling the s..."},{"name":"cloneConfig","doc":"Clone the current component using the original config values passed into this instance by default."},{"name":"destroy","doc":"Destroys this component by purging any event listeners, removing the component's element from the..."},{"name":"disable","doc":"Disable this component and fire the 'disable' event."},{"name":"doLayout","doc":"Force this container's layout to be recalculated. A call to this function is required after addin..."},{"name":"enable","doc":"Enable this component and fire the 'enable' event."},{"name":"enableBubble","doc":"Enables events fired by this Observable to bubble up an owner hierarchy by calling\nthis.getBubble..."},{"name":"find","doc":"Find a component under this container at any level by property"},{"name":"findBy","doc":"Find a component under this container at any level by a custom function. If the passed function r..."},{"name":"findById","doc":"Find a component under this container at any level by id"},{"name":"findByType","doc":"Find a component under this container at any level by xtype or class"},{"name":"findParentBy","doc":"Find a container above this component at any level by a custom function. If the passed function r..."},{"name":"findParentByType","doc":"Find a container above this component at any level by xtype or class"},{"name":"focus","doc":"Try to focus this component."},{"name":"get","doc":"Get a component contained by this container (alias for items.get(key))"},{"name":"getBox","doc":"Gets the current box measurements of the component's underlying element."},{"name":"getBubbleTarget","doc":"Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy."},{"name":"getComponent","doc":"Examines this container's items property\nand gets a direct child component of this container."},{"name":"getEl","doc":"Returns the CQ.Ext.Element which encapsulates this Component.\nThis will usually be a &lt;DIV> ele..."},{"name":"getHeight","doc":"Gets the current height of the component's underlying element."},{"name":"getId","doc":"Returns the id of this component or automatically generates and\nreturns an id if an id is not def..."},{"name":"getItemId","doc":"Returns the itemId of this component.  If an\nitemId was not assigned through configuration the\nid..."},{"name":"getLayout","doc":"Returns the layout currently in use by the container.  If the container does not currently have a..."},{"name":"getLayoutTarget","doc":"Returns the Element to be used to contain the child Components of this Container.\nAn implementati..."},{"name":"getOuterSize","doc":"Gets the current size of the component's underlying element, including space taken by its margins."},{"name":"getPosition","doc":"Gets the current XY position of the component's underlying element."},{"name":"getResizeEl","doc":"Returns the outermost Element of this Component which defines the Components overall size.\nUsuall..."},{"name":"getSize","doc":"Gets the current size of the component's underlying element."},{"name":"getWidth","doc":"Gets the current width of the component's underlying element."},{"name":"getXType","doc":"Gets the xtype for this component as registered with CQ.Ext.ComponentMgr. For a list of all\navail..."},{"name":"getXTypes","doc":"Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all\navailable..."},{"name":"hasClass","doc":"Checks if the component's underlying element has the specified CSS class."},{"name":"hide","doc":"Hide this component.  Listen to the 'beforehide' event and return\nfalse to cancel hiding the comp..."},{"name":"insert","doc":"Inserts a Component into this Container at a specified index. Fires the\nbeforeadd event before in..."},{"name":"isVisible","doc":"Returns true if this component is visible."},{"name":"isXType","doc":"Tests whether or not this Component is of a specific xtype. This can test whether this Component ..."},{"name":"mon","doc":"Adds listeners to any Observable object (or Elements) which are automatically removed when this C..."},{"name":"mun","doc":"Removes listeners that were added by the mon method."},{"name":"nextSibling","doc":"Returns the next component in the owning container"},{"name":"previousSibling","doc":"Returns the previous component in the owning container"},{"name":"relayEvents","doc":"Relays selected events from the specified Observable as if the events were fired by this."},{"name":"remove","doc":"Removes a component from this container.  Fires the beforeremove event before removing, then fire..."},{"name":"removeAll","doc":"Removes all components from this container."},{"name":"removeClass","doc":"Removes a CSS class from the component's underlying element."},{"name":"render","doc":"Render this Component into the passed HTML element.\nIf you are using a Container object to house ..."},{"name":"setAutoScroll","doc":"Sets the overflow on the content element of the component."},{"name":"setDisabled","doc":"Convenience function for setting disabled\/enabled by boolean."},{"name":"setHeight","doc":"Sets the height of the component.  This method fires the resize event."},{"name":"setPagePosition","doc":"Sets the page XY position of the component.  To set the left and top instead, use setPosition.\nTh..."},{"name":"setPosition","doc":"Sets the left and top of the component.  To set the page XY position instead, use setPagePosition..."},{"name":"setSize","doc":"Sets the width and height of this BoxComponent. This method fires the resize event. This method c..."},{"name":"setVisible","doc":"Convenience function to hide or show this component by boolean."},{"name":"setWidth","doc":"Sets the width of the component.  This method fires the resize event."},{"name":"show","doc":"Show this component.  Listen to the 'beforeshow' event and return\nfalse to cancel showing the com..."},{"name":"showAt","doc":"Displays this menu at a specific xy position and fires the 'show' event if a\nhandler for the 'bef..."},{"name":"syncSize","doc":"Force the component's size to recalculate based on the underlying element's current height and wi..."},{"name":"update","doc":"Update the content area of a component."},{"name":"updateBox","doc":"Sets the current box measurements of the component's underlying element."}],"events":[{"name":"add","doc":"@bubbles\nFires after any CQ.Ext.Component is added or inserted into the container."},{"name":"added","doc":"Fires when a component is added to an CQ.Ext.Container"},{"name":"afterlayout","doc":"Fires when the components in this container are arranged by the associated layout manager."},{"name":"afterrender","doc":"Fires after the component rendering is finished.\nThe afterrender event is fired after this Compon..."},{"name":"beforeadd","doc":"Fires before any CQ.Ext.Component is added or inserted into the container.\nA handler can return f..."},{"name":"beforedestroy","doc":"Fires before the component is destroyed. Return false from an event handler to stop the destroy."},{"name":"beforehide","doc":"Fires before the component is hidden by calling the hide method.\nReturn false from an event handl..."},{"name":"beforeremove","doc":"Fires before any CQ.Ext.Component is removed from the container.  A handler can return\nfalse to c..."},{"name":"beforerender","doc":"Fires before the component is rendered. Return false from an\nevent handler to stop the render."},{"name":"beforeshow","doc":"Fires before the component is shown by calling the show method.\nReturn false from an event handle..."},{"name":"beforestaterestore","doc":"Fires before the state of the component is restored. Return false from an event handler to stop t..."},{"name":"beforestatesave","doc":"Fires before the state of the component is saved to the configured state provider. Return false t..."},{"name":"destroy","doc":"Fires after the component is destroyed."},{"name":"disable","doc":"Fires after the component is disabled."},{"name":"enable","doc":"Fires after the component is enabled."},{"name":"hide","doc":"Fires after the component is hidden.\nFires after the component is hidden when calling the hide me..."},{"name":"mouseout","doc":"Fires when the mouse exits this menu"},{"name":"mouseover","doc":"Fires when the mouse is hovering over this menu"},{"name":"move","doc":"Fires after the component is moved."},{"name":"remove","doc":"@bubbles\nFires after any CQ.Ext.Component is removed from the container."},{"name":"removed","doc":"Fires when a component is removed from an CQ.Ext.Container"},{"name":"render","doc":"Fires after the component markup is rendered."},{"name":"resize","doc":"Fires after the component is resized."},{"name":"select","doc":"Fires when a date is selected from the CQ.Ext.DatePicker"},{"name":"show","doc":"Fires after the component is shown when calling the show method."},{"name":"staterestore","doc":"Fires after the state of the component is restored."},{"name":"statesave","doc":"Fires after the state of the component is saved to the configured state provider."}]}