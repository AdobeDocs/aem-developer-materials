{"name":"CQ.wcm.EditBase","doc":"A set of common functions for edit components. EditBase should not\nbe instantiated directly.","configs":[{"name":"IEScriptInsert","doc":"Dynamically inserting and executing a script on IE does not work if script is the first tag or is..."},{"name":"actions","doc":"An array of Ext.Button configs or an array of strings or a single string. The strings may be one ..."},{"name":"containerClass","doc":"CSS class attached to the container div (default is \"section\")."},{"name":"copyText","doc":"The text for the default copy button."},{"name":"deleteText","doc":"The text for the default delete button."},{"name":"dialog","doc":"The dialog, the dialog config or URL to retrieve the dialog config from."},{"name":"dropTarget","doc":"An array of config objects describing:  DOM elements which must be drop targets accepted drag obj..."},{"name":"editText","doc":"The text for the default edit button."},{"name":"element","doc":"The HTML element or ID of the element to anchor the edit component to."},{"name":"inlineEditing","doc":"Inline editing mode defines if the component editing (edit action) is done through an inline edit..."},{"name":"inplaceEditing","doc":"Base configuration for inplace editing; may be null if inplace editing is not available for the c..."},{"name":"insertBehavior","doc":"The behavior of the edit component when inserting new content."},{"name":"insertText","doc":"The text for the default insert button."},{"name":"isContained","doc":"True to define if component is contained in a div. This div will be created, moved and deleted wi..."},{"name":"isContainer","doc":"True to define if component is a container, e.g. a parsys. this is set via the make editable call..."},{"name":"isDropTarget","doc":"True to define the edit component as a drop target (default is true)."},{"name":"orderable","doc":"True to define the edit component as orderable, ie it can be dragged and dropped (default is true)."},{"name":"params","doc":"The params that will be passed to the edit dialog. params: {\n     paramName1: \"value 1\",\n     par..."},{"name":"pasteText","doc":"The text for the default paste button."},{"name":"path","doc":"The content path for the edit component."},{"name":"referenceText","doc":"The text for the default reference button."},{"name":"targetMode","doc":"Mode for displaying a target ghost or line below the current component while dragging over. Possi..."}],"props":[{"name":"EditBase.ANNOTATE","doc":"&lt;static&gt; The value for actions to create an annotate control. Usages:\nvar config = {\n    ac..."},{"name":"EditBase.COPYMOVE","doc":"&lt;static&gt; The value for actions to create a copy control. Usages:\nvar config = {\n    actions..."},{"name":"EditBase.DD_GROUP_ASSET","doc":"&lt;static&gt; Constant for edit component drag and drop media group."},{"name":"EditBase.DD_GROUP_COMPONENT","doc":"&lt;static&gt; \nConstant for edit component drag and drop group."},{"name":"EditBase.DD_GROUP_DEFAULT","doc":"&lt;static&gt; Constant for ExtJS drag and drop default group."},{"name":"EditBase.DD_GROUP_PAGE","doc":"&lt;static&gt; Constant for edit component drag and drop page group."},{"name":"EditBase.DD_GROUP_PARAGRAPH","doc":"&lt;static&gt; Constant for edit component drag and drop paragraph group."},{"name":"EditBase.DD_GROUP_PRODUCT","doc":"&lt;static&gt; Constant for edit component drag and drop product group."},{"name":"EditBase.DELETE","doc":"&lt;static&gt; The value for actions to create a delete control. Usages:\nvar config = {\n    actio..."},{"name":"EditBase.EDIT","doc":"&lt;static&gt; The value for actions to create an edit control. Usages:\nvar config = {\n    action..."},{"name":"EditBase.EDITANNOTATE","doc":"&lt;static&gt; The value for actions to create an edit and annotate control.\nUsage:\nvar config = ..."},{"name":"EditBase.EDITANNOTATECOPYMOVEDELETEINSERT","doc":"&lt;static&gt; The value for actions to create an edit, annotate, delete, copy and insert control..."},{"name":"EditBase.EDITANNOTATECOPYMOVEINSERT","doc":"&lt;static&gt; The value for actions to create an edit, annotate, copy and insert control.\nUsage:..."},{"name":"EditBase.EDITANNOTATEDELETE","doc":"&lt;static&gt; The value for actions to create an edit, delete and annotate control.\nUsage:\nvar c..."},{"name":"EditBase.EDITANNOTATEDELETEINSERT","doc":"&lt;static&gt; The value for actions to create an edit, annotate, delete and insert control.\nUsag..."},{"name":"EditBase.EDITCOPYMOVEDELETEINSERT","doc":"&lt;static&gt; The value for actions to create an edit, delete, copy and insert control.\nUsage:\nv..."},{"name":"EditBase.EDITCOPYMOVEINSERT","doc":"&lt;static&gt; The value for actions to create an edit, copy and insert control.\nUsage:\nvar confi..."},{"name":"EditBase.EDITDELETE","doc":"&lt;static&gt; The value for actions to create an edit and delete control.\nUsage:\nvar config = {\n..."},{"name":"EditBase.EDITDELETEINSERT","doc":"&lt;static&gt; The value for actions to create an edit, delete and insert control.\nUsage:\nvar con..."},{"name":"EditBase.INLINE_MODE_AUTO","doc":"&lt;static&gt; Inline editing mode: auto. See inlineEditing."},{"name":"EditBase.INLINE_MODE_FORCED","doc":"&lt;static&gt; Inline editing mode: forced. See inlineEditing."},{"name":"EditBase.INLINE_MODE_NEVER","doc":"&lt;static&gt; Inline editing mode: never. See inlineEditing."},{"name":"EditBase.INSERT","doc":"&lt;static&gt; The value for actions to create an insert control. Usages:\nvar config = {\n    acti..."},{"name":"EditBase.INSERTING_PARAGRAPH","doc":"&lt;static&gt; Loading text displayed when a paragraph is inserted."},{"name":"EditBase.INSERT_AFTER","doc":"&lt;static&gt; Constant for inserting a new component after another one."},{"name":"EditBase.INSERT_BEFORE","doc":"&lt;static&gt; Constant for inserting a new component before another one."},{"name":"EditBase.INSERT_LAST","doc":"&lt;static&gt; Constant for inserting a new component at the end."},{"name":"EditBase.PARSYS_NEW","doc":"&lt;static&gt; Resource type of the parsys placeholder."},{"name":"EditBase.REFERENCE_COMPONENT","doc":"&lt;static&gt; The resource type of the reference component."},{"name":"EditBase.REFERENCE_COMPONENT_PATH_PROPERTY","doc":"&lt;static&gt; The path property name of the reference component."},{"name":"EditBase.TARGET_COMPONENT","doc":"&lt;static&gt; Resource type of wrapper component used for targeting."},{"name":"EditBase.TARGET_MODE_GHOST","doc":"&lt;static&gt; Target mode: ghost. See targetMode."},{"name":"EditBase.TARGET_MODE_LINE","doc":"&lt;static&gt; Target mode: line. See targetMode."},{"name":"cq","doc":"&lt;static&gt; Name of the annotations folder."},{"name":"path","doc":" Content path of the edit component."},{"name":"purpose","doc":"Returns the parent of the current edit component (if available)."}],"methods":[{"name":"EditBase.showDialog","doc":"&lt;static&gt; Shows the dialog for the given edit component."},{"name":"cancelInplaceEditing","doc":"Cancels inplace editing (if inplace editing is currently active). Changed content\nwill be reverted."},{"name":"copyParagraph","doc":"Creates a copy of the paragraph with the specified path."},{"name":"createParagraph","doc":"Creates a new paragraph using the specified definition."},{"name":"doRemoveParagraph","doc":"Removes the given item from the server."},{"name":"equals","doc":"Returns if current component and anotherEditComponent parameter have the same path."},{"name":"finishInplaceEditing","doc":"Finishes inplace editing (if inplace editing is currently active). Changed content\nwill be persis..."},{"name":"getAnnotation","doc":"Returns the specified annotation."},{"name":"getAnnotationAt","doc":"Returns the annotation at the specified path."},{"name":"getCell","doc":"Returns the design cell of this component"},{"name":"getParentFromDOM","doc":"Returns the parent editable based on the DOM structure of the components,\nor null if there is no ..."},{"name":"getParentPath","doc":"Returns the parent path of the current edit component (if available)."},{"name":"getResourceSuperType","doc":"Returns the resource super type of the current edit component."},{"name":"getResourceType","doc":"Returns the resource type of the current edit component."},{"name":"getTargetAncestor","doc":"Returns the target component ancestor, or null if this component is not targeted."},{"name":"getTargetParent","doc":"Returns the targeted wrapper of this component. Note that this is different from getTargetAncesto..."},{"name":"hasAnnotations","doc":"Returns if this editable has registered annotations"},{"name":"initRefreshShortcuts","doc":"String shortcuts for refresh listeners."},{"name":"isActionCopyMove","doc":"Returns true if EditBase.COPYMOVE action is defined for the current edit component."},{"name":"isActionDelete","doc":"Returns true if EditBase.DELETE action is defined for the current edit component."},{"name":"isActionEdit","doc":"Returns true if EditBase.EDIT action is defined for the current edit component."},{"name":"isActionInsert","doc":"Returns true if EditBase.INSERT action is defined for the current edit component."},{"name":"isActionInsertOnly","doc":"Returns true if only EditBase.INSERT action is defined for the current edit component."},{"name":"isInsertAllowed","doc":"Returns if insert on component of a certain resource type is allowed."},{"name":"isReady","doc":"Returns if the component is ready (rendered and events attached) or not"},{"name":"isRemovable","doc":"Checks if this component can be removed from its container (i.e. if it can have a \"Delete\" option..."},{"name":"isSameParent","doc":"Returns if current component and anotherEditComponent parameter have the same one level parent."},{"name":"loadAnnotations","doc":"Loads the annotations.\nNote that (since 5.5) existing annotations are removed before loading comm..."},{"name":"moveParagraph","doc":"Moves the paragraph with the specified path."},{"name":"referenceParagraph","doc":"\nCreates a reference to the paragraph with the specified path."},{"name":"refresh","doc":"Refreshes the content element of the edit component."},{"name":"refreshCreated","doc":"\nRefreshes a newly created paragraph."},{"name":"refreshPage","doc":"Refreshes the page."},{"name":"refreshParent","doc":"Refreshes the parent of the paragraph. If the parent is undefined, the\npage will be refreshed."},{"name":"refreshSelf","doc":"Refreshes the paragraph."},{"name":"refreshSelfMoved","doc":"Refreshes the source and target paragraph after a move."},{"name":"removeParagraph","doc":"Removes the paragraph."},{"name":"startInplaceEditing","doc":"Starts inplace editing for the component if inplace editing is actually enabled for\nit."},{"name":"targetComponent","doc":"&lt;static&gt; Function to enable or disable targeting."},{"name":"updateComponentList","doc":"Collects the list of allowed components and updates the current\n'component list'. before the upda..."},{"name":"updateCqCssClass","doc":"updates the css class names on this element that are usually set by\nthe component includer and ne..."},{"name":"updateParagraph","doc":"Updates the paragraph using the specified property name and value(s)."}],"events":[]}